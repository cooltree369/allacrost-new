--------------------------------------------------------------------------------
-- a01_harrvah_capital_aftermath.lua
--
-- The state of Harrvah after the attack map script completes. The player has free
-- control to explore the city and complete the events necessary to proceed to the
-- sand dock map to finish out the chapter.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_harrvah_capital_aftermath = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG_PRINT = true;
-- Set to non-zero to enable different conditions when loading the map (refer to the DEBUG_Load() function)
DEBUG_LOAD_STATE = 0;

data_file = "lua/data/maps/harrvah_capital.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "Harrvah Capital";

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Theme_of_Tragedy.ogg";

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalRecords = {};

enemy_ids = { }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
event_sequences = {}; -- Holds IDs of the starting event for each event chain


-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["exterior"] = hoa_map.MapMode.CONTEXT_01; -- Displays the exterior of the town after the attack
contexts["interior_a"] = hoa_map.MapMode.CONTEXT_03;
contexts["interior_b"] = hoa_map.MapMode.CONTEXT_04;
contexts["interior_c"] = hoa_map.MapMode.CONTEXT_05;
contexts["interior_d"] = hoa_map.MapMode.CONTEXT_06;
contexts["interior_e"] = hoa_map.MapMode.CONTEXT_07;



function Load(m)
	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalRecords = Map.global_record_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddTileLayerToOrder(2);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(3);
	Map:AddTileLayerToOrder(4);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	CreateDialogues();
	CreateEvents();

	Map:SetCurrentTrack(0);

	-- TODO: figure out if visuals should be disabled normally, or wait for control to be given to the player before they are displayed
	-- Map:DisableIntroductionVisuals();
	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(false);
	Map:ShowDialogueIcons(true);

	Map:SetCamera(sprites["claudius"]);
	Map:SetPlayerSprite(sprites["claudius"]);
	if (DEBUG_LOAD_STATE ~= 0) then
		DEBUG_Load();
	else
		-- The map starts with Claudius in his bedroom
		sprites["claudius"]:SetXPosition(187, 0);
		sprites["claudius"]:SetYPosition(110, 0);
		sprites["claudius"]:SetDirection(hoa_map.MapMode.SOUTH);
		sprites["claudius"]:SetContext(contexts["interior_c"]);
	end

	IfPrintDebug(DEBUG, "Map loading complete");
end -- Load(m)


-- Makes appropriate adjustments to the map state to put the player at distinguished locations/times for map debugging
function DEBUG_Load()
	-- Move player to town entrance gate
	if (DEBUG_LOAD_STATE == 1) then
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(182, 0);
		sprites["claudius"]:SetContext(contexts["exterior"]);
	-- Move player to north side of town near the park
	elseif (DEBUG_LOAD_STATE == 2) then
		sprites["claudius"]:SetXPosition(78, 0);
		sprites["claudius"]:SetYPosition(128, 0);

		sprites["claudius"]:SetContext(contexts["exterior"]);
	-- Move player to right outside the throne room area
	elseif (DEBUG_LOAD_STATE == 3) then
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(64, 0);
		sprites["claudius"]:SetContext(contexts["exterior"]);
	end
end



function Update()
	-- Nothing special required
end



function Draw()
	Map:DrawMapLayers();
end



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");

	-- Exit to Claudius' home: triggers a dialogue between Claudius and his mother
	zones["leave_home"] = hoa_map.CameraZone(166, 174, 122, 124, contexts["interior_a"]);
	Map:AddZone(zones["leave_home"]);
end



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");

	local object = {};
	local treasure_container = {};

	-- TEMP: this glimmer treasure is added at the start of this map for testing purposes. Remove later
	object = hoa_map.GlimmerTreasure();
	object:SetObjectID(10000);
	object:SetXPosition(175, 0);
	object:SetYPosition(118, 0);
	object:SetContext(contexts["interior_c"]);
	treasure_container = object:GetTreasureContainer();
	treasure_container:AddDrunes(275);
	treasure_container:AddObject(1, 2);
	ObjectManager:AddObject(object);
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	local sprite;
	local sprite_id = 100;

	-- The map opens with Claudius in his room, and his mother downstairs
	sprite = ConstructSprite("Claudius", 1, 187, 108);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["claudius"] = sprite;

	sprite = ConstructSprite("Vanica", 2, 170, 110);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["vanica"] = sprite;

	-- Guards at town gates
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 92, 202);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 104, 202);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	-- Walking along main road
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 95, 110);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 101, 174);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	-- Market area
	sprite = ConstructSprite("Laila", 3, 119, 142);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["exterior"]);
	sprites["laila"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Female Merchant", sprite_id, 112, 136);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 134, 145);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 128, 138);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 107, 150);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["exterior"]);

	-- Graveyard area
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 40, 101);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["mark"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 164, 102);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);

	-- Around buildings
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 158, 118);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 134, 145);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetStationaryMovement(true);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 74, 124);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 22, 152);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetStationaryMovement(true);

	-- Sprites inside the inn, shops, or pub
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 145, 140);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_b"]);
	sprites["weapon_merchant"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Female Merchant", sprite_id, 71, 173);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_b"]);
	sprites["item_merchant"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Octavia", sprite_id, 118, 171);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["inn_keeper"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Livia", sprite_id, 139, 164);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_c"]);
	sprites["inn_worker"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 121, 163);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetStationaryMovement(true);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 135, 166);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 145, 165);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Man01", sprite_id, 142, 172.5);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_a"]);


	-- Inside of homes
	sprite = ConstructSprite("Marcus", 4, 47, 168);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["marcus"] = sprite;

	-- Near and around the castle
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 57, 71);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 139, 71);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	-- Inside the left side of the castle


	-- Inside the right side of the castle


	-- Near and inside the throne room
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 93, 62);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 103, 62);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);

	sprite = ConstructSprite("Knight01", 9, 99, 38);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["king"] = sprite;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 93.5, 37.5);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 102.5, 37.5);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 89, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 92, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 95, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 90, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 94, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 89, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 92, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 95, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 101, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 104, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 107, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 102, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 106, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 101, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 104, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 107, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG, "Creating enemies...");
	-- No enemies on this map
end



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------
	dialogues["leave_home-part1"] = 1;
	dialogue = hoa_map.MapDialogue.Create(dialogues["leave_home-part1"]);
		text = hoa_system.Translate("Oh, Claudius are you heading out now?");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());

	dialogues["leave_home-part2"] = 2;
	dialogue = hoa_map.MapDialogue.Create(dialogues["leave_home-part2"]);
		text = hoa_system.Translate("Yes. There is a ceremony in the throne room this afternoon for the expedition force. I need to head to the castle and prepare.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Alright then. Make sure you present your best self in front of his majesty.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(1000);
		text = hoa_system.Translate("Oh, hello Claudius. What's the matter?");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
		text = hoa_system.Translate("It's...nothing. I'm just glad you're okay.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Brother. I'm glad you're safe too. ");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
	sprites["laila"]:AddDialogueReference(1000);

	dialogue = hoa_map.MapDialogue.Create(1001);
		text = hoa_system.Translate("Oh dear. Preparing meals for this family was enough work. Doing so for our entire neighboorhood is nearly impossible.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());
	sprites["vanica"]:AddDialogueReference(1001);

	dialogue = hoa_map.MapDialogue.Create(1002);
		text = hoa_system.Translate("Your mother and I are doing what we can for those who lost their homes in the attack.");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
		text = hoa_system.Translate("Let me help. Show me where I can make myself useful.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("No, you need to rest. We may be attacked again you know, and how are you going to defend our city if you're exhausted?");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
	sprites["marcus"]:AddDialogueReference(1002);

	dialogue = hoa_map.MapDialogue.Create(1003);
		text = hoa_system.Translate("This inn converted into a shelter after the attack. We're completely full, so please find alternative lodging arrangements.");
		dialogue:AddLine(text, sprites["inn_keeper"]:GetObjectID());
	sprites["inn_keeper"]:AddDialogueReference(1003);

	dialogue = hoa_map.MapDialogue.Create(1004);
		text = hoa_system.Translate("There's so much work to do every day with this many guests. I'm exhausted.");
		dialogue:AddLine(text, sprites["inn_worker"]:GetObjectID());
	sprites["inn_worker"]:AddDialogueReference(1004);

	dialogue = hoa_map.MapDialogue.Create(1005);
		text = hoa_system.Translate("Most of my inventory was destroyed in the attack, but feel free to take a look.");
		dialogue:AddLine(text, sprites["item_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1000); -- event_chains["item_shop"]
	sprites["item_merchant"]:AddDialogueReference(1005);

	dialogue = hoa_map.MapDialogue.Create(1006);
		text = hoa_system.Translate("Demand has skyrocketed after our city was attacked. I'm sold out of most of my armaments, but I have a few selections remaining.");
		dialogue:AddLine(text, sprites["weapon_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1001); -- event_chains["weapon_armor_shop"] = 1001;
	sprites["weapon_merchant"]:AddDialogueReference(1006);

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------

	dialogue = hoa_map.MapDialogue.Create(10000);

end -- function CreateDialogues()


-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	local event = {};
	local event_id;

	-- Once Claudius first leaves his home, a short dialogue scene occurs with his mother
	event_sequences["leave_home"], event_id = 1, 1;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["vanica"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["leave_home-part1"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["leave_home-part2"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["vanica"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	---------- Miscellaneous Events
	event_sequences["pop_state"] = 10000;
	event = hoa_map.PopMapStateEvent.Create(event_sequences["pop_state"]);
end -- function CreateEvents()

----------------------------------------------------------------------------
---------- Update Functions
----------------------------------------------------------------------------

function Update()
	-- Process all notification events that we care about
	local index = 0;
	local notification = {};

	while (true) do
		notification = NotificationManager:GetNotificationEvent(index);
		if (notification == nil) then
			break;
		elseif (notification.category == "map" and notification.event == "collision") then
			HandleCollisionNotification(notification);
		end

		index = index + 1;
	end

	-- Check map zones for necessary actions
	if (zones["leave_home"]:IsPlayerSpriteEntering() == true) then
		if (GlobalRecords:GetRecord("left_home") ~= 1) then
			GlobalRecords:SetRecord("left_home", 1);
			EventManager:StartEvent(event_sequences["leave_home"]);
		end
	end

end


-- Processes collision notifications and takes appropriate action depending on the type and location of the collision
function HandleCollisionNotification(notification)
	-- We're only concerned with collisions by the player sprite for this map
	local sprite = notification.sprite;
	if (sprite:GetObjectID() ~= Map:GetPlayerSprite():GetObjectID()) then
		return;
	elseif (notification.collision_type == hoa_map.MapMode.OBJECT_COLLISION) then
		return;
	end

	-- Determine the positions of each side of the sprite's collision rectangle
	local x_left = RoundToInteger(notification.x_position + notification.x_offset - sprite:GetCollHalfWidth());
	local x_right = RoundToInteger(notification.x_position + notification.x_offset + sprite:GetCollHalfWidth());
	local y_top = RoundToInteger(notification.y_position + notification.y_offset - sprite:GetCollHeight());
	local y_bottom = RoundToInteger(notification.y_position + notification.y_offset);

	local locked_door_collision = false;
	-- Collisions should now be checked to see if they should start a context switch
	if (sprite:GetContext() == contexts["exterior"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			-- There are a lot of south-facing doors in this context. The list below are the coordinates for every reachable door, starting from
			-- the top left of the map and going across and down. Because their are so many buildings in the city, we enumerate them from a-z in
			-- this order

			-- Castle doors
			if (y_top == 68 and x_left >= 22 and x_right <= 24) then
				SpriteContextTransition("enter-left-castle-side", sprite);
			elseif (y_top == 70 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("enter-left-castle", sprite);
			elseif (y_top == 60 and x_left >= 96 and x_right <= 100) then
				SpriteContextTransition("enter-throne-room", sprite);
			elseif (y_top == 70 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("enter-right-castle", sprite);
			elseif (y_top == 68 and x_left >= 172 and x_right <= 174) then
				SpriteContextTransition("enter-right-castle-side", sprite);

			-- City structures top row
			elseif (y_top == 120 and x_left > 12 and x_right <= 16) then
				SpriteContextTransition("enter-building-a", sprite);
			elseif (y_top == 124 and x_left >= 50 and x_right <= 54) then
				SpriteContextTransition("enter-building-b", sprite); -- Pub
			elseif (y_top == 124 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("enter-building-c", sprite);
			elseif (y_top == 120 and x_left >= 140 and x_right <= 144) then
				SpriteContextTransition("enter-building-d", sprite);
			elseif (y_top == 122 and x_left >= 168 and x_right <= 172) then
				SpriteContextTransition("enter-building-e", sprite); -- Claudius' home

			--- City structures middle row
			elseif (y_top == 150 and x_left >= 20 and x_right <= 24) then
				SpriteContextTransition("enter-building-f", sprite);
			elseif (y_top == 148 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("enter-building-g", sprite);
			elseif (y_top == 150 and x_left >= 78 and x_right <= 82) then
				SpriteContextTransition("enter-building-h", sprite);
			elseif (y_top == 152 and x_left >= 148 and x_right <= 152) then
				SpriteContextTransition("enter-building-i", sprite); -- Weapon/armor shop
			elseif (y_top == 146 and x_left >= 178 and x_right <= 182) then
				SpriteContextTransition("enter-building-j", sprite);

			-- City structures bottom row
			elseif (y_top == 174 and x_left >= 22 and x_right <= 26) then
				SpriteContextTransition("enter-building-k", sprite);
			elseif (y_top == 178 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("enter-building-l", sprite);
			elseif (y_top == 178 and x_left >= 80 and x_right <= 84) then
				SpriteContextTransition("enter-building-m", sprite); -- Item shop
			elseif (y_top == 180 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("enter-building-n", sprite); -- Inn
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, left side entrance
			if (x_left == 84 and y_top >= 60 and y_bottom <= 66) then
				SpriteContextTransition("balcony-to-left-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			-- Castle Balcony, right side entrance
			if (x_right <= 112 and y_top >= 60 and y_bottom <= 66) then
				SpriteContextTransition("balcony-to-right-tower", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_a"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 104 and x_left >= 162 and x_right <= 166) then
				SpriteContextTransition("upstairs-building-e", sprite);
			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("upstairs-building-n", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 60 and x_left >= 96 and x_right <= 100) then
				SpriteContextTransition("exit-throne-room", sprite);
			elseif (y_bottom == 128 and x_left >= 50 and x_right <= 54) then
				SpriteContextTransition("exit-building-b", sprite);
			elseif (y_bottom == 124 and x_left >= 168 and x_right <= 172) then
				SpriteContextTransition("exit-building-e", sprite);
			elseif (y_bottom == 182 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("exit-building-l", sprite);
			elseif (y_bottom == 184 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("exit-building-n", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_b"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 43 and x_left >= 66 and x_right <= 70) then
				SpriteContextTransition("upstairs-1-left-tower", sprite);
			elseif (y_top == 37 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("upstairs-2-right-tower", sprite);
			elseif (y_top == 37 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-2-right-tower", sprite);
			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
				SpriteContextTransition("upstairs-building-a", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and x_left >= 22 and x_right <= 24) then
				SpriteContextTransition("exit-left-castle-side", sprite);
			elseif (y_bottom == 70 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("exit-left-castle", sprite);
			elseif (y_bottom == 124 and x_left >= 12 and x_right <= 16) then
				SpriteContextTransition("exit-building-a", sprite);
			elseif (y_bottom == 156 and x_left >= 148 and x_right <= 152) then
				SpriteContextTransition("exit-building-i", sprite);
			elseif (y_bottom == 182 and x_left >= 80 and x_right <= 84) then
				SpriteContextTransition("exit-building-m", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and y_top >= 60 and y_bottom <= 66) then
				SpriteContextTransition("left-tower-to-balcony", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_c"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 37 and x_left >= 66 and x_right <= 70) then
				SpriteContextTransition("upstairs-2-left-tower", sprite);
			elseif (y_top == 37 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("downstairs-2-left-tower", sprite);
			elseif (y_top == 43 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("upstairs-1-right-tower", sprite);
			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
				SpriteContextTransition("downstairs-building-a", sprite);
			elseif (y_top == 105 and x_left >= 160 and x_right <= 164) then
				SpriteContextTransition("downstairs-building-e", sprite);
			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-building-n", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 70 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("exit-right-castle", sprite);
			elseif (y_bottom == 68 and x_left >= 172 and x_right <= 174) then
				SpriteContextTransition("exit-right-castle-side", sprite);
			elseif (y_bottom == 178 and x_left >= 22 and x_right <= 26) then
				SpriteContextTransition("exit-building-k", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			if (x_left == 112 and y_top >= 60 and y_bottom <= 66) then
				SpriteContextTransition("right-tower-to-balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_d"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-3-right-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 124 and x_left >= 140 and x_right <= 144) then
				SpriteContextTransition("exit-building-d", sprite);
			elseif (y_bottom == 154 and x_left >= 20 and x_right <= 24) then
				SpriteContextTransition("exit-building-f", sprite);
			elseif (y_bottom == 154 and x_left >= 78 and x_right <= 82) then
				SpriteContextTransition("exit-building-h", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_e"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("downstairs-3-left-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 128 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("exit-building-c", sprite);
			elseif (y_bottom == 152 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("exit-building-g", sprite);
			elseif (y_bottom == 150 and x_left >= 178 and x_right <= 182) then
				SpriteContextTransition("exit-building-j", sprite);
			end
		end
	end

	if (locked_door_collision) then
		-- Prevent playing the sound multiple times concurrently if the player keeps colliding with a locked door
		if (sounds["door_locked"]:IsPlaying() == false) then
			sounds["door_locked"]:Play();
		end
	end
end


--! \brief Initiates necessary actions for a sprite to transition from one context on the map to another
--! \param transition_key An string determining what sort of transition should take place
--! \param sprite A pointer to the sprite making the transition
function SpriteContextTransition(transition_key, sprite)
	local transition_time = 1000;
	local new_context;

	sprite:SetMoving(false);
	-- Set the virtual focus to the sprite's original location.
	Map:GetVirtualFocus():MoveToObject(sprite, true);
	Map:SetCamera(Map:GetVirtualFocus());

	-- Castle floor transitions
	if (transition_key == "enter-left-castle-side") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-left-castle-side") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "enter-left-castle") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-left-castle") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "balcony-to-left-tower") then
		new_context = contexts["interior_b"];
		sprite:ModifyXPosition(-2, -0.5);
	elseif (transition_key == "left-tower-to-balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyXPosition(2, 0.5);
	elseif (transition_key == "enter-throne-room") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-throne-room") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "balcony-to-right-tower") then
		new_context = contexts["interior_c"];
		sprite:ModifyXPosition(2, 0.5);
	elseif (transition_key == "right-tower-to-balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyXPosition(-2, -0.5);
	elseif (transition_key == "enter-right-castle") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-right-castle") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "enter-right-castle-side") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-right-castle-side") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	-- Castle floor transitions
	elseif (transition_key == "upstairs-1-left-tower") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(74, 40);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "upstairs-2-left-tower") then
		new_context = contexts["interior_e"];
		sprite:SetPosition(74, 34);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-2-left-tower") then
		new_context = contexts["interior_b"];
		sprite:SetPosition(68, 46);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-3-left-tower") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(68, 40);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "upstairs-1-right-tower") then
		new_context = contexts["interior_b"];
		sprite:SetPosition(128, 40);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "upstairs-2-right-tower") then
		new_context = contexts["interior_d"];
		sprite:SetPosition(128, 34);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-2-right-tower") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(122, 46);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-3-right-tower") then
		new_context = contexts["interior_b"];
		sprite:SetPosition(122, 40);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	-- Town building transitions
	elseif (transition_key == "enter-building-a") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-a") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "upstairs-building-a") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(1, 0);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-building-a") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(1, 0);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "enter-building-b") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-b") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-c") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-c") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-d") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-d") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-e") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-e") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "upstairs-building-e") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(162, 108);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-building-e") then
		new_context = contexts["interior_a"];
		sprite:SetPosition(164, 109);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "enter-building-f") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-f") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-g") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-g") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-h") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-h") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-i") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-i") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-j") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-j") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-k") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-k") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-l") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-l") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-m") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-m") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "enter-building-n") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(0, -0.5);
	elseif (transition_key == "exit-building-n") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(0, 0.5);
	elseif (transition_key == "upstairs-building-n") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(1, 0);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-building-n") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(1, 0);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	else
		new_context = contexts["exterior"];
		-- TODO: print warning message about unknown transition key
	end

	sprite:SetContext(new_context);
	Map:ContextTransitionBlackColor(new_context, transition_time);
	-- Animate the camera moving to the sprite's new location
	Map:SetCamera(sprite, transition_time);
	-- Prevent player from controlling sprite until transition completes
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	EventManager:StartEvent(event_sequences["pop_state"], transition_time);
end

----------------------------------------------------------------------------
---------- Draw Functions
----------------------------------------------------------------------------

function Draw()
	Map:DrawMapLayers();
end

----------------------------------------------------------------------------
---------- Event Functions
----------------------------------------------------------------------------


-- Puts game state into shop mode with items
functions["LoadItemShop"] = function()
	LoadNewShop(
		1, 4 -- healing potions
	);
end


-- Puts game state into shop mode with items
functions["LoadWeaponArmorShop"] = function()
	LoadNewShop(
		10002, 1, -- iron sword
		20001, 2, -- karlate helm
		30001, 3, -- leather chain mail
		30002, 1  -- karlate breast plate
	);
end

