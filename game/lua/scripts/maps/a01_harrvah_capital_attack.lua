--------------------------------------------------------------------------------
-- a01_harrvah_capital_attack.lua
--
-- A script specific to the main storyline events. The Harrvah Capital is under
-- attack by demons and the player has to navigate his party through the chaos
-- to find the king.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_harrvah_capital_attack = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG_PRINT = true;
-- Set to non-zero to enable different conditions when loading the map (refer to the DEBUG_Load() function)
DEBUG_LOAD_STATE = 8;

data_file = "lua/data/maps/harrvah_capital.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "Harrvah Capital";

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Betrayal_Battle.ogg";

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalRecords = {};
LocalRecords = {};

enemy_ids = { }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
events = {};
sounds = {};

-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["exterior"] = hoa_map.MapMode.CONTEXT_02; -- This is the "default" context for this map. CONTEXT_01 is not used
contexts["interior_a"] = hoa_map.MapMode.CONTEXT_03;
contexts["interior_b"] = hoa_map.MapMode.CONTEXT_04;
contexts["interior_c"] = hoa_map.MapMode.CONTEXT_05;
contexts["interior_d"] = hoa_map.MapMode.CONTEXT_06;
contexts["interior_e"] = hoa_map.MapMode.CONTEXT_07;

----------------------------------------------------------------------------
---------- Load Functions
----------------------------------------------------------------------------

function Load(m)
	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalRecords = Map.global_record_group;
	LocalRecords = Map.local_record_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddTileLayerToOrder(2);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(3);
	Map:AddTileLayerToOrder(4);

	event_sequences = {}; -- Holds IDs of the starting event for each event chain

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	-- These sequences are used both within CreateDialogues and CreateEvents, so they must be defined here
	event_sequences["help_citizen_option"] = 1000;
	event_sequences["ignore_citizen_option"] = 1050;
	CreateDialogues();
	CreateEvents();

	-- Audio: load sounds
	sounds["door_locked"] = hoa_audio.SoundDescriptor();
	sounds["door_locked"]:LoadAudio("snd/door_locked.ogg");
	Map:SetCurrentTrack(0);

	-- Visuals: night lightning
	VideoManager:EnableLightOverlay(hoa_video.Color(0.0, 0.0, 0.3, 0.6));

	-- TODO: figure out if visuals should be disabled normally, or wait for control to be given to the player before they are displayed
	-- Map:DisableIntroductionVisuals();
	Map.virtual_focus:SetContext(contexts["exterior"]);
	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(true);
	Map:ShowDialogueIcons(true);

	-- All character sprites are initially uncollidable, since they will "merge" into one sprite at the end of the opening scene
	if (DEBUG_LOAD_STATE == 0) then
		Map:SetCamera(sprites["claudius"]);
		sprites["claudius"].collidable = false;
		sprites["mark"].collidable = false;
		sprites["lukar"].collidable = false;
		EventManager:StartEvent(event_sequences["intro_scene"]);
	else
		DEBUG_Load();
	end


	IfPrintDebug(DEBUG_PRINT, "Map loading complete");
end -- Load(m)


-- Makes appropriate adjustments to the map state to reflect different debug
function DEBUG_Load()
	sprites["mark"].collidable = false;
	sprites["lukar"].collidable = false;
	sprites["mark"].visible = false;
	sprites["lukar"].visible = false;
	Map:SetCamera(sprites["claudius"]);

	-- Skip introductory scene and dialogue so player has immediate control
	if (DEBUG_LOAD_STATE == 1) then
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(185, 0);
	-- Move player to just below the zone that triggers the demon spawn event
	elseif (DEBUG_LOAD_STATE == 2) then
		sprites["claudius"]:SetXPosition(5, 0);
		sprites["claudius"]:SetYPosition(174, 0);
	-- Just before approaching the market area, where NPCs are fleeing the battle ahead
	elseif (DEBUG_LOAD_STATE == 3) then
		sprites["claudius"]:SetXPosition(62, 0);
		sprites["claudius"]:SetYPosition(155, 0);
	-- Before the scene where the party views a citizen being trapped by a demon
	elseif (DEBUG_LOAD_STATE == 4) then
		sprites["claudius"]:SetXPosition(162, 0);
		sprites["claudius"]:SetYPosition(150, 0);
	-- Before the park, when the player chooses to help the trapped citizen
	elseif (DEBUG_LOAD_STATE == 5) then
		GlobalRecords:SetRecord("helped_citizen", 1);
		functions["SetupReuniteEvent"]();
		sprites["claudius"]:SetXPosition(128, 0);
		sprites["claudius"]:SetYPosition(129, 0);
	-- Before the park, when the player chooses not to help the trapped citizen
	elseif (DEBUG_LOAD_STATE == 6) then
		GlobalRecords:SetRecord("helped_citizen", 0);
		sprites["claudius"]:SetXPosition(128, 0);
		sprites["claudius"]:SetYPosition(129, 0);
	-- Below the first set of stairs leading up to the castle
	elseif (DEBUG_LOAD_STATE == 7) then
		sprites["claudius"]:SetXPosition(66, 0);
		sprites["claudius"]:SetYPosition(98, 0);
	-- Inside the left tower area, just before the party separation event
	elseif (DEBUG_LOAD_STATE == 8) then
		sprites["claudius"]:SetContext(contexts["interior_b"]);
		sprites["claudius"]:SetXPosition(58, 0);
		sprites["claudius"]:SetYPosition(54, 0);
	-- Move player to just outside the throne room
	elseif (DEBUG_LOAD_STATE == 9) then
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(65, 0);
	else
		IfPrintDebug(DEBUG_PRINT, "Unsupported value for DEBUG_LOAD_STATE: " .. DEBUG_LOAD_STATE);
	end
end



function CreateZones()
	IfPrintDebug(DEBUG_PRINT, "Creating zones...");

	-- Bottom-left of map: triggers the scene where the characters observe a demon spawning in from the shadows
	zones["witness_spawn"] = hoa_map.CameraZone(2, 12, 162, 164, contexts["exterior"]);
	Map:AddZone(zones["witness_spawn"]);

	zones["fleeing_market"] = hoa_map.CameraZone(76, 78, 152, 160, contexts["exterior"]);
	Map:AddZone(zones["fleeing_market"]);

	-- Mid-right of map: triggers the scene where the player watches a citizen being chased by a demon
	zones["witness_chase"] = hoa_map.CameraZone(160, 164, 138, 140, contexts["exterior"]);
	Map:AddZone(zones["witness_chase"]);

	-- Just above and to the right of the witness_chase zone, where the player makes the decision to help the citizen
	zones["help_decision"] = hoa_map.CameraZone(166, 168, 124, 132, contexts["exterior"]);
	Map:AddZone(zones["help_decision"]);

	-- North of the market, where Claudius reunites with Lukar and Mark as they defeat two demons
	zones["market_demon_fight"] = hoa_map.CameraZone(124, 126, 126, 134, contexts["exterior"]);
	Map:AddZone(zones["market_demon_fight"]);

	-- Right before the throne room, where Claudius gets separated from Lukar and Mark by spawning demons
	zones["balcony_demons"] = hoa_map.CameraZone(89, 91, 60, 66, contexts["exterior"]);
	Map:AddZone(zones["balcony_demons"]);

	---------- Enemy Spawning Zones
	-- Zone #01: Bottom left of map
	zones["enemy01"] = hoa_map.EnemyZone(14, 62, 176, 188);
	Map:AddZone(zones["enemy01"]);

	-- Zone #02: Left of main road, second row of buildings
	zones["enemy02"] = hoa_map.EnemyZone(32, 88, 150, 158);
	Map:AddZone(zones["enemy02"]);

	-- Zone #03: Weapon shop area
	zones["enemy03"] = hoa_map.EnemyZone(140, 192, 150, 162);
	Map:AddZone(zones["enemy03"]);

	-- Zone #04: North of park, below left cliff face
	zones["enemy04"] = hoa_map.EnemyZone(62, 102, 96, 110);
	Map:AddZone(zones["enemy04"]);

	-- Zone #05: Outside of left castle tower
	zones["enemy05"] = hoa_map.EnemyZone(20, 82, 68, 76);
	Map:AddZone(zones["enemy05"]);

	-- Zone #06: Inside of left castle tower
	zones["enemy06"] = hoa_map.EnemyZone(36, 58, 44, 68);
	Map:AddZone(zones["enemy06"]);
end



function CreateObjects()
	IfPrintDebug(DEBUG_PRINT, "Creating objects...");
end



function CreateSprites()
	IfPrintDebug(DEBUG_PRINT, "Creating sprites...");

	local sprite;
	local animation;

	-- This X/Y position represents the bottom middle point of the map, just outside the city wall gates
	local entrance_x = 98;
	local entrance_y = 208;

	-- Create sprites for the three playable characters
	sprite = ConstructSprite("Claudius", ObjectManager:GenerateObjectID(), entrance_x - 2, entrance_y - 2);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprites["claudius"] = sprite;
	Map:SetPlayerSprite(sprites["claudius"]);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), entrance_x + 2, entrance_y - 2);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetName(hoa_system.Translate("Mark"));
	sprites["mark"] = sprite;

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), entrance_x, entrance_y - 4);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetName(hoa_system.Translate("Lukar"));
	sprites["lukar"] = sprite;

	-- Sprites for the villager being chased by a demon seen in the intro
	sprite = ConstructSprite("Man01", ObjectManager:GenerateObjectID(), 84, 106);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprite = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 86, 108);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);
	sprites["intro_demon"] = sprite;

	-- Create the captain, NPCs, and enemies fighting the battle straight ahead of the city entrance
	-- Coordinates for NPC battle that lies straight ahead on the road after entering the town
	sprite = ConstructSprite("Knight06", ObjectManager:GenerateObjectID(), 98, 180);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetName(hoa_system.Translate("Captain Bravis"));
	sprites["captain"] = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 98, 177);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 93, 177);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 93, 174);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight02", ObjectManager:GenerateObjectID(), 103.5, 176.5);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 104, 173.5);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- Create the senior knight and others fighting near the inn
	-- Coordinates for NPC battle that lies near the entrance to the inn
	sprite = ConstructSprite("Knight04", ObjectManager:GenerateObjectID(), 118, 182);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 118, 183);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight03", ObjectManager:GenerateObjectID(), 112, 186);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 114, 185.5);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- Create the sergeant and others fighting near the item shop entrance
	sprite = ConstructSprite("Knight05", ObjectManager:GenerateObjectID(), 82, 183);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:SetName(hoa_system.Translate("Sergeant Methus"));
	sprites["sergeant"] = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 82, 180.5);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 90, 189);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 88, 188);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- This enemy spawns in during an event scene, so it is in the initial unspawned state
	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 9, 152);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["enemy_spawn"] = sprite;

	-- These NPC sprites are seen fleeing the market area as the player approaches
	sprite = ConstructSprite("Livia", ObjectManager:GenerateObjectID(), 98, 156);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprite.visible = false;
	sprite.collidable = false;
	sprites["fleeing_woman"] = sprite;

	sprite = ConstructSprite("MaleChild01", ObjectManager:GenerateObjectID(), 99, 157);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprite.visible = false;
	sprite.collidable = false;
	sprites["fleeing_child"] = sprite;

	-- Create knight and demon sprites battling in the market area of the town
	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 95, 142);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 95, 144);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 103, 139);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 105, 138.6);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 91, 151.3);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 92.9, 151.1);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 106.5, 151);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 107, 149);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 109, 157);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 111.2, 156.6);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- Sprites for the scene where a citizen is chased and trapped by a demon
	sprite = ConstructSprite("Man02", ObjectManager:GenerateObjectID(), 148, 126);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprites["trap_citizen"] = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 145, 126);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);
	sprite:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);
	sprites["trap_demon"] = sprite;

	-- These enemies either spawn in at the market or the player encounters them as his allies defeat them
	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 107, 129);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprites["market_demon1"] = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 107, 131);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprites["market_demon2"] = sprite;

	-- Create knight and demon sprites battling in the park area of the town
	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 105.5, 117);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 105.5, 119);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 91, 119);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 91, 121);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 89, 127);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 90.8, 126.6);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- Knight and demon fighting near the left castle tower
	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 89, 127);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 90.8, 126.6);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	-- Knights guarding the staircase to the upper floors
	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 66.8, 46);
	sprite:SetContext(contexts["interior_b"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["stair_guard1"] = sprite;

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 69.2, 46);
	sprite:SetContext(contexts["interior_b"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["stair_guard2"] = sprite;

	-- Demons that spawn on the balcony outside the throne room
	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 89, 62.75);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["balcony_demon1"] = sprite;

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 89, 64.75);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["balcony_demon2"] = sprite;

	-- Royal guard, king, and demons in the throne room
	sprite = ConstructSprite("Knight06", ObjectManager:GenerateObjectID(), 107.2, 41.8);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["king"] = sprite;

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 107, 44);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 107, 46);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 105, 42);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 105, 44);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 103.6, 39.6);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 101, 40);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 87.5, 47);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 90, 47);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);

	sprite = ConstructSprite("Knight01", ObjectManager:GenerateObjectID(), 90, 56.5);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetStationaryMovement(true);

	sprite = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID(), 90, 54);
	sprite:SetContext(contexts["interior_a"]);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetStationaryMovement(true);
	sprite:ChangeState(hoa_map.EnemySprite.ACTIVE);
end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG_PRINT, "Creating enemies...");

	-- Creates an enemy sprite with the common settings for the map
	local CreateCommonEnemy = function(enemy_name, enemy_context, enemy_parties)
		local sprite = ConstructEnemySprite(enemy_name, ObjectManager:GenerateObjectID());
		sprite:SetContext(enemy_context);
		sprite:SetBattleMusicFile("mus/Battle_Jazz.ogg");
		sprite:SetBattleBackgroundFile("img/backdrops/battle/desert_cave.png");
		for i = 1, #enemy_parties do
			sprite:NewEnemyParty();
			for j = 1, #enemy_parties[i] do
				sprite:AddEnemy(enemy_parties[i][j]);
			end
		end
		return sprite;
	end

	local enemy = {};

	enemy = CreateCommonEnemy("snake", contexts["exterior"], {{1, 2}, {1, 1, 1}});
	zones["enemy01"]:AddEnemy(enemy, Map, 1);

	enemy = CreateCommonEnemy("snake", contexts["exterior"], {{1, 2}, {1, 1, 1}});
	zones["enemy02"]:AddEnemy(enemy, Map, 1);

	enemy = CreateCommonEnemy("snake", contexts["exterior"], {{1, 2}, {1, 1, 1}});
	zones["enemy03"]:AddEnemy(enemy, Map, 1);

	enemy = CreateCommonEnemy("snake", contexts["exterior"], {{1, 2}, {1, 1, 1}});
	zones["enemy04"]:AddEnemy(enemy, Map, 1);

	enemy = CreateCommonEnemy("snake", contexts["exterior"], {{1, 2}, {1, 1, 1}});
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	enemy = CreateCommonEnemy("snake", contexts["interior_b"], {{1, 2}, {1, 1, 1}});
	zones["enemy06"]:AddEnemy(enemy, Map, 1);
end



function CreateDialogues()
	IfPrintDebug(DEBUG_PRINT, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------
	dialogues["opening"] = 10;
	dialogue = hoa_map.MapDialogue.Create(dialogues["opening"]);
		text = hoa_system.Translate("Wh...what the hell is going on? What the hell are they?!");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Captain!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Lukar! Take your squad and make your way to the castle. Inform the captain of the royal guard of our return and ask for orders.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("The rest of us will repel these demons! Now go! Defend our people and our homes!");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());

	dialogues["locked_door"] = 20;
	dialogue = hoa_map.MapDialogue.Create(dialogues["locked_door"]);
		text = hoa_system.Translate("With all the chaos going on out here, all the citizens have surely locked themselves in their homes. Stop wasting time and head for the castle.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	dialogues["demon_spawn1"] = 30;
	dialogue = hoa_map.MapDialogue.Create(dialogues["demon_spawn1"]);
		text = hoa_system.Translate("...!");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	dialogues["demon_spawn2"] = 40;
	dialogue = hoa_map.MapDialogue.Create(dialogues["demon_spawn2"]);
		text = hoa_system.Translate("I don't believe what I just saw.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("That demon...just emerged from the shadows...?");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Well, that's just great! How the hell are we supposed to stop an invasion that comes through shadows?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Here it comes!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogues["citizen_chased"] = 50;
	dialogue = hoa_map.MapDialogue.Create(dialogues["citizen_chased"]);
		text = hoa_system.Translate("Help! Get it away from me!");
		dialogue:AddLine(text, sprites["trap_citizen"]:GetObjectID());
		dialogue:AddLineTiming(2000);

	-- The next two dialogues share some common text, so define it once and re-use it
	local help_text = {};
	help_text["orders_option"] = hoa_system.Translate("Follow orders and continue searching for the king.");
	help_text["help_option"] = hoa_system.Translate("Ignore orders and help the cornered citizen.");
	help_text["claudius_response_orders"] = hoa_system.Translate("You're right, we can't help everyone along our way. Let's keep going.");
	help_text["claudius_response_help"] = hoa_system.Translate("But, I can't just leave them to die! I'll catch up with you at the castle.");
	help_text["mark_response_help"] = hoa_system.Translate("God dammit rookie!");
	help_text["lukar_response_help"] = hoa_system.Translate("If that's your decision, so be it. Try to catch back up to us. And stay alive.");

	dialogues["help_citizen"] = 60;
	dialogue = hoa_map.MapDialogue.Create(dialogues["help_citizen"]);
		text = hoa_system.Translate("Where are you going, Claudius? That's not the way to the castle.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Our orders are to find the king. We don't have time for this!");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("I understand that you want to help that citizen. We do as well. But we were given a mission of grave importance. Are you abandoning your duty?");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("...");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		dialogue:AddOption(help_text["orders_option"], 4);
		dialogue:AddOptionGlobalRecord("helped_citizen", 0);
		dialogue:AddOption(help_text["help_option"], 5);
		dialogue:AddOptionGlobalRecord("helped_citizen", 1);
		dialogue:AddLine(help_text["claudius_response_orders"], sprites["claudius"]:GetObjectID(), hoa_common.CommonDialogue.END_DIALOGUE);
		dialogue:AddLineEventAtEnd(event_sequences["ignore_citizen_option"]);
		dialogue:AddLine(help_text["claudius_response_help"], sprites["claudius"]:GetObjectID());
		dialogue:AddLine(help_text["mark_response_help"], sprites["mark"]:GetObjectID());
		dialogue:AddLine(help_text["lukar_response_help"], sprites["lukar"]:GetObjectID());
		dialogue:AddLineEventAtEnd(event_sequences["help_citizen_option"]);

	-- Same dialogue as help_citizen, but a shorterned version so the player doesn't have to go through the entire thing again
	dialogues["help_citizen_short"] = 70;
	dialogue = hoa_map.MapDialogue.Create(dialogues["help_citizen_short"]);
		text = hoa_system.Translate("We were given a mission of grave importance. Are you abandoning your duty?");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("...");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		dialogue:AddOption(help_text["orders_option"], 2);
		dialogue:AddOptionGlobalRecord("helped_citizen", 0);
		dialogue:AddOption(help_text["help_option"], 4);
		dialogue:AddOptionGlobalRecord("helped_citizen", 1);
		dialogue:AddLine(help_text["claudius_response_orders"], sprites["claudius"]:GetObjectID(), hoa_common.CommonDialogue.END_DIALOGUE);
		dialogue:AddLineEventAtEnd(event_sequences["ignore_citizen_option"]);
		dialogue:AddLine(help_text["claudius_response_help"], sprites["claudius"]:GetObjectID());
		dialogue:AddLine(help_text["mark_response_help"], sprites["mark"]:GetObjectID());
		dialogue:AddLine(help_text["lukar_response_help"], sprites["lukar"]:GetObjectID());
		dialogue:AddLineEventAtEnd(event_sequences["help_citizen_option"]);

	dialogues["help_citizen_saved"] = 80;
	dialogue = hoa_map.MapDialogue.Create(dialogues["help_citizen_saved"]);
		text = hoa_system.Translate("Th, thank you sir! Thank you!");
		dialogue:AddLine(text, sprites["trap_citizen"]:GetObjectID());
		dialogue:AddLineTiming(3000);

	dialogues["near_castle"] = 90;
	dialogue = hoa_map.MapDialogue.Create(dialogues["near_castle"]);
		text = hoa_system.Translate("Alright, the castle is just up ahead.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogues["balcony_demons"] = 100;
	dialogue = hoa_map.MapDialogue.Create(dialogues["balcony_demons"]);
		text = hoa_system.Translate("Gahh, watch out!");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		dialogue:AddLineTiming(3000);

	dialogues["balcony_demons2"] = 101;
	dialogue = hoa_map.MapDialogue.Create(dialogues["balcony_demons2"]);
		text = hoa_system.Translate("Damn! The throne room is right there!");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Claudius, leave us and go to the side of his majesty. We'll catch up with you as soon as we take care of this.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Understood.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(1000);
		text = hoa_system.Translate("We'll hold them off and protect the citizens. Make your way to the castle with haste!");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
	sprites["captain"]:AddDialogueReference(1000);

	dialogue = hoa_map.MapDialogue.Create(1010);
		text = hoa_system.Translate("Go! We'll manage here.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());
	sprites["sergeant"]:AddDialogueReference(1010);

	dialogue = hoa_map.MapDialogue.Create(1020);
		text = hoa_system.Translate("We've been ordered by our captain to seek the king. Is he safe? Do you know where we can find him?");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("He should be in the throne room surrounded by his royal guard.");
		dialogue:AddLine(text, sprites["stair_guard1"]:GetObjectID());
		dialogue:SetMaxViews(1);
	sprites["stair_guard1"]:AddDialogueReference(1020);

	dialogue = hoa_map.MapDialogue.Create(1021);
		text = hoa_system.Translate("You'll find the king in the throne room. It's the large door on the balcony toward your right.");
		dialogue:AddLine(text, sprites["stair_guard1"]:GetObjectID());
	sprites["stair_guard1"]:AddDialogueReference(1021);
end -- function CreateDialogues()


-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	IfPrintDebug(DEBUG_PRINT, "Creating events...");

	local event = {};
	local event_id;

	-- Initial map scene -- camera pans across a stretch of the city under attack before focusing on the captain
	event_sequences["intro_scene"], event_id = 1, 1;
	event = hoa_map.CustomEvent.Create(event_id, "StartIntroScene", "");
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3, 2000);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["intro_villager"], 34, 99);
 	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["intro_demon"], 38, 98);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, Map.virtual_focus, 98, 130);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, Map.virtual_focus, sprites["captain"].x_position, sprites["captain"].y_position);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 0, -22);
	event:SetRelativeDestination(true);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], 0, -22);
	event:SetRelativeDestination(true);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 0, -22);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["opening"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3);
	-- Move Claudius, Lukar and Mark to the same position
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 98, 185);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], 98, 185);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 98, 185);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "", "EndIntroScene");

	-- Party watches as enemy demon emerges from the shadows and attacks
	event_sequences["demon_spawns"], event_id = 50, 50;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
 	event:AddEventLinkAtStart(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["demon_spawn1"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SpawnSceneDemon", "IsSceneDemonActive");
	event:AddEventLinkAtEnd(event_id + 1, 1000);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["demon_spawn2"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["enemy_spawn"], 0, 8);
	event:SetRelativeDestination(true);
	-- TODO: tell enemy sprite to roam and hunt

	-- NPCs running from the market to their homes
	event_sequences["fleeing_market"], event_id = 100, 100;
	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["fleeing_woman"]);
	event:AddSprite(sprites["fleeing_child"]);
	event:Visible(true);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 4);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["fleeing_woman"], 49, 156);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["fleeing_woman"], 49, 148);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["fleeing_woman"]);
	event:Visible(false);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["fleeing_child"], 49, 157);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["fleeing_child"], 49, 148);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["fleeing_child"]);
	event:Visible(false);

	-- Party observes a citizen trying to escape from demons and decides whether or not to help
	event_sequences["citizen_trapped"], event_id = 150, 150;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2);
	event:AddEventLinkAtStart(event_id + 3);
	event:AddEventLinkAtStart(event_id + 5);
	event_id = event_id + 1; event = hoa_map.CameraMoveEvent.Create(event_id , sprites["trap_citizen"], 1000);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["citizen_chased"]);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_citizen"], 190, 130);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_citizen"], 192, 145);
 	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_id + 3)
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_demon"], 190, 130);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_demon"], 192, 142);
 	event_id = event_id + 1; event = hoa_map.CameraMoveEvent.Create(event_id, sprites["claudius"], 1000);
	event:AddEventLinkAtEnd(event_id + 1)
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	-- Dialogue where player must choose to help or ignore the citizen
	event_sequences["help_citizen"], event_id = 200, 200;
	event = hoa_map.CustomEvent.Create(event_id, "StartHelpEvent", "");
	event:AddEventLinkAtStart(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 5, 0);
	event:SetRelativeDestination(true);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["help_citizen"]);
	-- Depending on which option the player selected in this dialogue, either the "help_citizen_option" or "ignore_citizen_option"
	-- event sequence is started when the dialogue event ends

	-- Nearly identical to the last event chain, but plays a shortened version of the dialogue
	event_sequences["help_citizen_short"], event_id = 250, 250;
	event = hoa_map.CustomEvent.Create(event_id, "StartHelpEvent", "");
	event:AddEventLinkAtStart(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 5, 0);
	event:SetRelativeDestination(true);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["help_citizen_short"]);
	-- Depending on which option the player selected in this dialogue, either the "help_citizen_option" or "ignore_citizen_option"
	-- event sequence is started when the dialogue event ends

	-- Player chose to help the citizen. Mark and Lukar leave Claudius and exit the screen to the left as dialogue ends
	event_id = event_sequences["help_citizen_option"];
	-- TODO: remove mark and lukar from active party
	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Collidable(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 150, 126);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2, 2000);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SetupReuniteEvent", "");
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 192, 140);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["trap_demon"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_id + 1);
	-- TODO: add a battle event here
	event_id = event_id + 1; event = hoa_map.BattleEncounterEvent.Create(event_id);
	event:AddEnemy(3);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["trap_demon"]);
	event:StationaryMovement(false);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "KillTrapDemon", "IsTrapDemonInactive");
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["help_citizen_saved"]);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2, 250);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Collidable(false); -- Temporarily disable collision for Claudius so the citizen can run through him
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_citizen"], 191, 129);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["trap_citizen"], 161, 129);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Collidable(true);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["trap_citizen"]);
	event:Visible(false);
	event:Collidable(false);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);
	event:AddGlobalRecord("helped_citizen", 1);

	-- Player chose to ignore the citizen. Move Claudius back to the left of the zone and hide mark and lukar sprites
	event_id = event_sequences["ignore_citizen_option"];
	event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], -5, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Visible(false);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], -2, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	-- Claudius catches up with Mark and Lukar as they defeat enemies and continue on together (only seen if Claudius helped citizen)
	event_sequences["rejoin_allies"], event_id = 300, 300;
	-- TODO: add lukar and mark back to active party
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 118, 130);
	event:AddEventLinkAtEnd(event_id + 1, 200);
	event:AddEventLinkAtEnd(event_id + 2, 500);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "KillMarketDemons", "AreMarketDemonsInactive");
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:AddSprite(sprites["mark"]);
	event:StationaryMovement(false);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:AddSprite(sprites["mark"]);
	event:Direction(hoa_map.MapMode.EAST);
	event:AddEventLinkAtEnd(event_id + 1, 300);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["near_castle"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], 113, 130);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 113, 130);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:AddSprite(sprites["mark"]);
	event:Visible(false);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	-- Two enemy demons spawn in and attack the party (only seen if Claudius ignored citizen)
	event_sequences["market_demon_spawns"], event_id = 350, 350;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 118, 130);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SpawnMarketDemons", "AreMarketDemonsActive");
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["market_demon1"], 116, 130);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["market_demon2"], 118, 132);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_id + 1);
	-- TODO: add a battle event here
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "KillMarketDemons", "AreMarketDemonsInactive");
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["near_castle"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	-- Enemies drop down between Claudius and his allies. Claudius continues on alone
	event_sequences["separate_party"], event_id = 400, 400;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtStart(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["balcony_demons"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtStart(event_id + 1, 500);
	event:AddEventLinkAtStart(event_id + 2, 800);
	event:AddEventLinkAtStart(event_id + 3, 800);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 92, 63);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event:AddEventLinkAtEnd(event_id + 3);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 86, 64.75);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], 86, 60.75);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SpawnBalconyDemons", "AreBalconyDemonsActive");
	event:AddEventLinkAtEnd(event_id + 1, 300);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:AddSprite(sprites["mark"]);
	event:StationaryMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["balcony_demons2"]);
	event:AddEventLinkAtEnd(event_id + 1);
	-- TODO: remove Lukar and Mark from active party
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	-- Claudius enters the throne room
	event_sequences["throne_entered"], event_id = 450, 450;

	-- Closing scene of map
	event_sequences["closing_scene"], event_id = 500, 500;
	event = hoa_map.CustomEvent.Create(event_id, "MapEndTransition", "IsMapEndTransitionComplete");
	event:AddEventLinkAtEnd(event_id + 1);

	---------- Miscellaneous Events
	event_sequences["locked_door"] = 10000;
	event = hoa_map.DialogueEvent.Create(event_sequences["locked_door"], dialogues["locked_door"]);

	event_sequences["pop_state"] = 10100;
	event = hoa_map.PopMapStateEvent.Create(event_sequences["pop_state"])
end -- function CreateEvents()

----------------------------------------------------------------------------
---------- Update Functions
----------------------------------------------------------------------------

function Update()
	-- Process all notification events that we care about
	local index = 0;
	local notification = {};

	while (true) do
		notification = NotificationManager:GetNotificationEvent(index);
		if (notification == nil) then
			break;
		elseif (notification.category == "map" and notification.event == "collision") then
			HandleCollisionNotification(notification);
		end

		index = index + 1;
	end

	-- Check map zones for necessary actions
	if (zones["witness_spawn"]:IsPlayerSpriteEntering() == true) then
		if (EventManager:TimesEventStarted(event_sequences["demon_spawns"]) == 0) then
			EventManager:StartEvent(event_sequences["demon_spawns"]);
		end
	elseif (zones["fleeing_market"]:IsPlayerSpriteEntering() == true) then
		if (EventManager:TimesEventStarted(event_sequences["fleeing_market"]) == 0) then
			EventManager:StartEvent(event_sequences["fleeing_market"]);
		end
	elseif (zones["witness_chase"]:IsPlayerSpriteEntering() == true) then
		if (EventManager:TimesEventStarted(event_sequences["citizen_trapped"]) == 0) then
			Map:GetPlayerSprite():SetMoving(false);
			EventManager:StartEvent(event_sequences["citizen_trapped"]);
		end
	-- This zone is a little complicated. On the first time the zone is entered, a dialogue occurs where the player selects to either help or ignore
	-- a citizen in trouble. If they choose to ignore and then re-enter the zone, then a second dialogue happens where the player has a chance to
	-- change their mind.
	elseif (zones["help_decision"]:IsPlayerSpriteEntering() == true and Map:CurrentState() == hoa_map.MapMode.STATE_EXPLORE) then
		if (EventManager:TimesEventStarted(event_sequences["help_citizen"]) == 0) then
			EventManager:StartEvent(event_sequences["help_citizen"]); -- A dialogue in this event sequence will set the "helped_citizen" global record
		-- Play out the shortened dialogue for all subsequent entries into this zone, unless the player has finished helping the citizen or has finished
		-- the next event sequence (where the citizen sprite vanishes)
		elseif (GlobalRecords:GetRecord("helped_citizen") ~= 1 and sprites["trap_citizen"].visible == true) then
			EventManager:StartEvent(event_sequences["help_citizen_short"]);
		end
	-- Different event sequences play out here depending on whether the player earlier chose to help or ignore the citizen
	elseif (zones["market_demon_fight"]:IsPlayerSpriteEntering() == true) then
		-- Hide the trap citizen and demon from the previous event sequence, as the player no longer has the opportunity to save them
		sprites["trap_citizen"].visible = false;
		sprites["trap_citizen"].collidable = false;
		sprites["trap_demon"].visible = false;
		sprites["trap_demon"].collidable = false;
		if (GlobalRecords:GetRecord("helped_citizen") == 0 and EventManager:TimesEventStarted(event_sequences["market_demon_spawns"]) == 0) then
			EventManager:StartEvent(event_sequences["market_demon_spawns"]);
		elseif (EventManager:TimesEventStarted(event_sequences["rejoin_allies"]) == 0) then
			EventManager:StartEvent(event_sequences["rejoin_allies"]);
		end
	elseif (zones["balcony_demons"]:IsPlayerSpriteEntering() == true) then
		if (EventManager:TimesEventStarted(event_sequences["separate_party"]) == 0) then
			-- Make Lukar's and Mark's sprites visible and put them at the same position as Claudius
			sprites["lukar"]:MoveToObject(sprites["claudius"], false);
			sprites["lukar"]:SetDirection(sprites["claudius"]:GetDirection());
			sprites["lukar"].visible = true;
			sprites["mark"]:MoveToObject(sprites["claudius"], false);
			sprites["mark"]:SetDirection(sprites["claudius"]:GetDirection());
			sprites["mark"].visible = true;
			EventManager:StartEvent(event_sequences["separate_party"]);
		end
	end
end


-- Processes collision notifications and takes appropriate action depending on the type and location of the collision
function HandleCollisionNotification(notification)
	-- We're only concerned with collisions by the player sprite for this map
	local sprite = notification.sprite;
	if (sprite:GetObjectID() ~= Map:GetPlayerSprite():GetObjectID()) then
		return;
	elseif (notification.collision_type == hoa_map.MapMode.OBJECT_COLLISION) then
		-- TODO: we may want to use this collision type to detect if the object was an enemy and start a battle if so
		return;
	end

	-- Determine the positions of each side of the sprite's collision rectangle
	local x_left = RoundToInteger(notification.x_position + notification.x_offset - sprite:GetCollHalfWidth());
	local x_right = RoundToInteger(notification.x_position + notification.x_offset + sprite:GetCollHalfWidth());
	local y_top = RoundToInteger(notification.y_position + notification.y_offset - sprite:GetCollHeight());
	local y_bottom = RoundToInteger(notification.y_position + notification.y_offset);

	local locked_door_collision = false;
	-- Collisions should now be checked to see if they play a "locked door" sound, or start a context switch
	if (sprite:GetContext() == contexts["exterior"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			-- There are a lot of south-facing doors, some which are locked (play a sound) and others which need to trigger a context switch
			-- The list below are the coordinates for every reachable door, starting from the top left of the map and going across and down
			-- TODO: there's probably a better/faster way to do this position checking (a lookup table?). For now this solution works fine though
			-- Castle doors
			if (y_top == 68 and notification.x_position >= 22 and notification.x_position <= 24) then
				SpriteContextTransition("enter_lcastle_side", sprite);
			elseif (y_top == 60 and notification.x_position >= 96 and notification.x_position <= 100) then
				SpriteContextTransition("balcony_to_throne", sprite);
			-- City top row doors
			elseif (y_top == 120 and notification.x_position > 12 and notification.x_position <= 16) then
				locked_door_collision = true;
			elseif (y_top == 124 and notification.x_position >= 50 and notification.x_position <= 54) then
				locked_door_collision = true;
			elseif (y_top == 124 and notification.x_position >= 116 and notification.x_position <= 120) then
				locked_door_collision = true;
			elseif (y_top == 120 and notification.x_position >= 140 and notification.x_position <= 144) then
				locked_door_collision = true;
			elseif (y_top == 122 and notification.x_position >= 168 and notification.x_position <= 172) then
				locked_door_collision = true;
			-- City middle row doors
			elseif (y_top == 150 and notification.x_position >= 20 and notification.x_position <= 24) then
				locked_door_collision = true;
			elseif (y_top == 148 and notification.x_position >= 48 and notification.x_position <= 52) then
				locked_door_collision = true;
			elseif (y_top == 150 and notification.x_position >= 78 and notification.x_position <= 82) then
				locked_door_collision = true;
			elseif (y_top == 152 and notification.x_position >= 148 and notification.x_position <= 152) then
				locked_door_collision = true;
			elseif (y_top == 146 and notification.x_position >= 178 and notification.x_position <= 182) then
				locked_door_collision = true;
			-- City bottom row doors
			elseif (y_top == 174 and notification.x_position >= 22 and notification.x_position <= 26) then
				locked_door_collision = true;
			elseif (y_top == 178 and notification.x_position >= 48 and notification.x_position <= 52) then
				locked_door_collision = true;
			elseif (y_top == 178 and notification.x_position >= 80 and notification.x_position <= 84) then
				locked_door_collision = true;
			elseif (y_top == 180 and notification.x_position >= 116 and notification.x_position <= 120) then
				locked_door_collision = true;
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, left side entrance
			if (x_left == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("balcony_to_ltower", sprite);
			end
			-- x22-24, y68 = left side door
			-- x96-100, y60 = throne room
		end
	elseif (sprite:GetContext() == contexts["interior_a"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 60 and notification.x_position >= 96 and notification.x_position <= 100) then
				SpriteContextTransition("throne_to_balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_b"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and notification.x_position >= 22 and notification.x_position <= 24) then
				SpriteContextTransition("exit_lcastle_side", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("ltower_to_balcony", sprite);
			end
		end
	end

	if (locked_door_collision) then
		-- Prevent playing the sound multiple times concurrently if the player keeps colliding with a locked door
		if (sounds["door_locked"]:IsPlaying() == false) then
			sounds["door_locked"]:Play();
		end
		if (LocalRecords:GetRecord("locked_door") ~= 0) then
			LocalRecords:AddNewRecord("locked_door", 1);
			EventManager:StartEvent(event_sequences["locked_door"], 500);
		end
	end
end


--! \brief Initiates necessary actions for a sprite to transition from one context on the map to another
--! \param transition_key An string determining what sort of transition should take place
--! \param sprite A pointer to the sprite making the transition
function SpriteContextTransition(transition_key, sprite)
	local transition_time = 1000;
	local new_context;

	sprite:SetMoving(false);
	-- Set the virtual focus to the sprite's original location.
	Map:GetVirtualFocus():MoveToObject(sprite, true);
	Map:SetCamera(Map:GetVirtualFocus());

	if (transition_key == "enter_lcastle_side") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit_lcastle_side") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "balcony_to_ltower") then
		new_context = contexts["interior_b"];
		sprite:ModifyXPosition(-2, -0.5);
	elseif (transition_key == "ltower_to_balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyXPosition(2, 0.5);
	elseif (transition_key == "balcony_to_throne") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "throne_to_balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	else
		new_context = contexts["exterior"];
		-- TODO: print warning message about unknown transition key
	end

	sprite:SetContext(new_context);
	Map:ContextTransitionBlackColor(new_context, transition_time);
	-- Animate the camera moving to the sprite's new location
	Map:SetCamera(sprite, transition_time);
	-- Prevent player from controlling sprite until transition completes
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	EventManager:StartEvent(event_sequences["pop_state"], transition_time);
end

----------------------------------------------------------------------------
---------- Draw Functions
----------------------------------------------------------------------------

function Draw()
	Map:DrawMapLayers();
end

----------------------------------------------------------------------------
---------- Event Functions
----------------------------------------------------------------------------

-- Move camera to just below the right staircase leading to the castle for the start of the scene
functions["StartIntroScene"] = function()
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 0); -- Initially set the screen to black
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 1000); -- Gradually fade the screen back in
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	Map:MoveVirtualFocus(66, 98);
	Map:SetCamera(Map.virtual_focus, 0);
	Map.virtual_focus:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED - 25); -- Custom speed for fast camera panning
end


-- Hide all character sprites but Claudius and give control over to the player. Will not return success unless all
-- character sprites are not in motion
functions["EndIntroScene"] = function()
	if (sprites["claudius"]:IsMoving() == true or sprites["mark"]:IsMoving() == true or sprites["lukar"]:IsMoving() == true) then
		return false;
	end

	sprites["intro_villager"].visible = false;
	sprites["intro_villager"].collidable = false;
	sprites["intro_demon"].visible = false;
	sprites["intro_demon"].collidable = false;
	sprites["captain"]:SetStationaryMovement(true);
	sprites["mark"].visible = false;
	sprites["lukar"].visible = false;
	sprites["claudius"].collidable = true;
	sprites["claudius"]:SetDirection(hoa_map.MapMode.NORTH);
	Map:SetCamera(sprites["claudius"], 500);
	Map:PopState();
	return true;
end


-- Spawn the enemy demon and move the camera to it
functions["SpawnSceneDemon"] = function()
	sprites["enemy_spawn"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	sprites["enemy_spawn"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
	Map:SetCamera(sprites["enemy_spawn"], 2000);
end


-- Returns true once the enemy_spawn demon is in the active state and fully spawned in
functions["IsSceneDemonActive"] = function()
	if (sprites["enemy_spawn"]:GetState() == hoa_map.EnemySprite.ACTIVE) then
		Map:SetCamera(sprites["claudius"], 1000); -- Move the camera back to the player
		sprites["enemy_spawn"]:ChangeState(hoa_map.EnemySprite.HUNT);
		return true;
	else
		return false;
	end
end


-- Dissipate the trap demon for one second to simulate it being defeated
functions["KillTrapDemon"] = function()
	sprites["trap_demon"]:SetFadeTime(1000);
	sprites["trap_demon"]:ChangeState(hoa_map.EnemySprite.DISSIPATE);
end


-- Returns true once the trap demon is in the inactive state
functions["IsTrapDemonInactive"] = function()
	if (sprites["trap_demon"]:GetState() == hoa_map.EnemySprite.INACTIVE) then
		return true;
	else
		return false;
	end
end


-- Spawn the two market spawn demons for one second
functions["SpawnMarketDemons"] = function()
	sprites["market_demon1"]:SetFadeTime(1000);
	sprites["market_demon1"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	sprites["market_demon1"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
	sprites["market_demon2"]:SetFadeTime(1000);
	sprites["market_demon2"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	sprites["market_demon2"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
end


-- Returns true once both market demons are in the active state
functions["AreMarketDemonsActive"] = function()
	if (sprites["market_demon1"]:GetState() == hoa_map.EnemySprite.ACTIVE and sprites["market_demon2"]:GetState() == hoa_map.EnemySprite.ACTIVE) then
		sprites["market_demon1"]:SetStationaryMovement(true);
		sprites["market_demon2"]:SetStationaryMovement(true);
		return true;
	else
		return false;
	end
end


-- Dissipates the two market spawn demons for one second to simulate their defeat
functions["KillMarketDemons"] = function()
	sprites["market_demon1"]:SetFadeTime(1000);
	sprites["market_demon1"]:ChangeState(hoa_map.EnemySprite.DISSIPATE);
	sprites["market_demon2"]:SetFadeTime(1000);
	sprites["market_demon2"]:ChangeState(hoa_map.EnemySprite.DISSIPATE);
end


-- Returns true once both market demons are in the inactive state
functions["AreMarketDemonsInactive"] = function()
	if (sprites["market_demon1"]:GetState() == hoa_map.EnemySprite.INACTIVE and sprites["market_demon2"]:GetState() == hoa_map.EnemySprite.INACTIVE) then
		return true;
	else
		return false;
	end
end


-- Move mark and lukar sprites on top of Claudius' position and make them visible before sending them to their positions
functions["StartHelpEvent"] = function()
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	sprites["claudius"]:SetRunning(false);
	sprites["lukar"]:MoveToObject(sprites["claudius"], false);
	sprites["lukar"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["lukar"].visible = true;
end


-- Move mark and lukar sprites to entrance of the park area along with the enemy sprites fighting them
functions["SetupReuniteEvent"] = function()
	sprites["lukar"]:SetPosition(113, 130);
	sprites["lukar"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["lukar"]:SetStationaryMovement(true);
	sprites["lukar"].visible = true;
	sprites["lukar"].collidable = false;
	sprites["mark"]:SetPosition(112, 132);
	sprites["mark"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["mark"]:SetStationaryMovement(true);
	sprites["mark"].visible = true;
	sprites["mark"].collidable = false;

	sprites["market_demon1"]:SetPosition(111, 130);
	sprites["market_demon1"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["market_demon1"]:ChangeState(hoa_map.EnemySprite.ACTIVE);
	sprites["market_demon1"]:SetStationaryMovement(true);
	sprites["market_demon1"].visible = true;
	sprites["market_demon1"].collidable = false;
	sprites["market_demon2"]:SetPosition(110, 132);
	sprites["market_demon2"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["market_demon2"]:ChangeState(hoa_map.EnemySprite.ACTIVE);
	sprites["market_demon2"]:SetStationaryMovement(true);
	sprites["market_demon2"].visible = true;
	sprites["market_demon2"].collidable = false;
end


-- Spawn the two demons on the balcony for two seconds
functions["SpawnBalconyDemons"] = function()
	sprites["balcony_demon1"]:SetFadeTime(2000);
	sprites["balcony_demon1"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	sprites["balcony_demon1"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
	sprites["balcony_demon2"]:SetFadeTime(2000);
	sprites["balcony_demon2"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	sprites["balcony_demon2"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
end


-- Returns true once both balcony demons are in the active state
functions["AreBalconyDemonsActive"] = function()
	if (sprites["balcony_demon1"]:GetState() == hoa_map.EnemySprite.ACTIVE and sprites["balcony_demon2"]:GetState() == hoa_map.EnemySprite.ACTIVE) then
		sprites["balcony_demon1"]:SetStationaryMovement(true);
		sprites["balcony_demon1"]:SetDirection(hoa_map.MapMode.WEST);
		sprites["balcony_demon2"]:SetStationaryMovement(true);
		sprites["balcony_demon2"]:SetDirection(hoa_map.MapMode.WEST);
		return true;
	else
		return false;
	end
end


-- End the map through a transition to a custom mode that displays screen text before loading the next map
functions["MapEndTransition"] = function()
	local mode = hoa_custom.CustomMode("lua/scripts/custom/screen_display.lua");
	mode:AddOption("text1", "Several days later...");
	mode:AddOption("initial_time", "1000");
	mode:AddOption("display_time", "2000");
	mode:AddOption("map", "lua/scripts/maps/a01_harrvah_capital_aftermath.lua");
	Map:TransitionToNewMode(mode, true);
end


-- Returns true once the map is no longer in the transition state
functions["IsMapEndTransitionComplete"] = function()
	if (Map:CurrentState() == hoa_map.MapMode.STATE_TRANSITION) then
		return false;
	else
		return true;
	end
end
