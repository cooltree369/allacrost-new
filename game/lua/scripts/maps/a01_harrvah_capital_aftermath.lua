--------------------------------------------------------------------------------
-- a01_harrvah_capital_aftermath.lua
--
-- The state of Harrvah after the attack map script completes. The player has free
-- control to explore the city and complete the events necessary to proceed to the
-- sand dock map to finish out the chapter.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_harrvah_capital_aftermath = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG_PRINT = true;
-- Set to non-zero to enable different conditions when loading the map (refer to the DEBUG_Load() function)
DEBUG_LOAD_STATE = 9;

data_file = "lua/data/maps/harrvah_capital.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "Harrvah Capital";

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Theme_of_Tragedy.ogg";

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalRecords = {};

enemy_ids = { }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
event_sequences = {}; -- Holds IDs of the starting event for each event chain


-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["exterior"] = hoa_map.MapMode.CONTEXT_01; -- Displays the exterior of the town after the attack
contexts["interior_a"] = hoa_map.MapMode.CONTEXT_03;
contexts["interior_b"] = hoa_map.MapMode.CONTEXT_04;
contexts["interior_c"] = hoa_map.MapMode.CONTEXT_05;
contexts["interior_d"] = hoa_map.MapMode.CONTEXT_06;
contexts["interior_e"] = hoa_map.MapMode.CONTEXT_07;



function Load(m)
	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalRecords = Map.global_record_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddTileLayerToOrder(2);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(3);
	Map:AddTileLayerToOrder(4);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	CreateDialogues();
	CreateEvents();

	Map:SetCurrentTrack(0);

	-- TODO: figure out if visuals should be disabled normally, or wait for control to be given to the player before they are displayed
	-- Map:DisableIntroductionVisuals();
	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(false);
	Map:ShowDialogueIcons(true);

	Map:SetCamera(sprites["claudius"]);
	Map:SetPlayerSprite(sprites["claudius"]);

	IfPrintDebug(DEBUG, "Map loading complete");
end -- Load(m)



function Update()
	-- Nothing special required
end



function Draw()
	Map:DrawMapLayers();
end



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");

end



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");

	local object = {};
	local treasure_container = {};

	-- TEMP: this glimmer treasure is added at the start of this map for testing purposes. Remove later
	object = hoa_map.GlimmerTreasure();
	object:SetObjectID(10000);
	object:SetXPosition(175, 0);
	object:SetYPosition(118, 0);
	object:SetContext(contexts["interior_c"]);
	treasure_container = object:GetTreasureContainer();
	treasure_container:AddDrunes(275);
	treasure_container:AddObject(1, 2);
	ObjectManager:AddObject(object);
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	local sprite;

	-- The map opens with Claudius in his room
	sprite = ConstructSprite("Claudius", 1, 187, 108);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["claudius"] = sprite;

	sprite = ConstructSprite("Laila", 10, 180, 118);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["laila"] = sprite;

	sprite = ConstructSprite("Marcus", 11, 186, 112);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["marcus"] = sprite;

	sprite = ConstructSprite("Vanica", 12, 166, 112);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["vanica"] = sprite;

	-- Sprites roaming around the town


	-- Sprites inside the inn, shops, or pub
	sprite = ConstructSprite("Man01", 510, 144, 140);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["weapon_merchant"] = sprite;

	sprite = ConstructSprite("Female Merchant", 520, 73, 173);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_b"]);
	sprites["item_merchant"] = sprite;

	sprite = ConstructSprite("Octavia", 530, 118, 168);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["inn_keeper"] = sprite;

	sprite = ConstructSprite("Livia", 531, 113, 174);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_c"]);
	sprites["inn_worker"] = sprite;

	-- Sprites inside of homes


	-- Sprites near and around the castle


	-- Sprites inside the left side of the castle


	-- Sprites inside the right side of the castle


	-- Sprites near and inside the throne room

end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG, "Creating enemies...");
	-- No enemies on this map
end



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(100);
		text = hoa_system.Translate("Welcome home, Claudius. What's the matter?");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
		text = hoa_system.Translate("It's...nothing. I'm just glad you're okay.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
	sprites["laila"]:AddDialogueReference(100);

	dialogue = hoa_map.MapDialogue.Create(101);
		text = hoa_system.Translate("Oh dear, oh dear.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());
	sprites["vanica"]:AddDialogueReference(101);

	dialogue = hoa_map.MapDialogue.Create(102);
		text = hoa_system.Translate("Your mother and I are doing what we can for those who lost their homes in the attack.");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
		text = hoa_system.Translate("Let me help. Show me where I can make myself useful.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("No, you need to rest. We may be attacked again you know, and how are you going to defend our city if you're exhausted?");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
	sprites["marcus"]:AddDialogueReference(102);

	dialogue = hoa_map.MapDialogue.Create(103);
		text = hoa_system.Translate("Sorry, this inn has converted into a shelter after the attack and we're completely full.");
		dialogue:AddLine(text, sprites["inn_keeper"]:GetObjectID());
	sprites["inn_keeper"]:AddDialogueReference(103);

	dialogue = hoa_map.MapDialogue.Create(104);
		text = hoa_system.Translate("So much work to do. I'm exhausted.");
		dialogue:AddLine(text, sprites["inn_worker"]:GetObjectID());
	sprites["inn_worker"]:AddDialogueReference(104);

	dialogue = hoa_map.MapDialogue.Create(105);
		text = hoa_system.Translate("Most of my inventory was destroyed in the attack.");
		dialogue:AddLine(text, sprites["item_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1000); -- event_chains["item_shop"]
	sprites["item_merchant"]:AddDialogueReference(105);

	dialogue = hoa_map.MapDialogue.Create(106);
		text = hoa_system.Translate("Demand has skyrocketed after our city was attacked. I've sold most of my armaments, but I have a few selections remaining.");
		dialogue:AddLine(text, sprites["weapon_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1001); -- event_chains["weapon_armor_shop"] = 1001;
	sprites["weapon_merchant"]:AddDialogueReference(106);

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------


end -- function CreateDialogues()


-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	local event = {};
	local event_id;

	---------- Miscellaneous Events
	event_sequences["pop_state"] = 10000;
	event = hoa_map.PopMapStateEvent.Create(event_sequences["pop_state"]);
end -- function CreateEvents()

----------------------------------------------------------------------------
---------- Update Functions
----------------------------------------------------------------------------

function Update()
	-- Process all notification events that we care about
	local index = 0;
	local notification = {};

	while (true) do
		notification = NotificationManager:GetNotificationEvent(index);
		if (notification == nil) then
			break;
		elseif (notification.category == "map" and notification.event == "collision") then
			HandleCollisionNotification(notification);
		end

		index = index + 1;
	end

	-- Check map zones for necessary actions

end


-- Processes collision notifications and takes appropriate action depending on the type and location of the collision
function HandleCollisionNotification(notification)
	-- We're only concerned with collisions by the player sprite for this map
	local sprite = notification.sprite;
	if (sprite:GetObjectID() ~= Map:GetPlayerSprite():GetObjectID()) then
		return;
	elseif (notification.collision_type == hoa_map.MapMode.OBJECT_COLLISION) then
		return;
	end

	-- Determine the positions of each side of the sprite's collision rectangle
	local x_left = RoundToInteger(notification.x_position + notification.x_offset - sprite:GetCollHalfWidth());
	local x_right = RoundToInteger(notification.x_position + notification.x_offset + sprite:GetCollHalfWidth());
	local y_top = RoundToInteger(notification.y_position + notification.y_offset - sprite:GetCollHeight());
	local y_bottom = RoundToInteger(notification.y_position + notification.y_offset);

	local locked_door_collision = false;
	-- Collisions should now be checked to see if they should start a context switch
	if (sprite:GetContext() == contexts["exterior"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			-- There are a lot of south-facing doors in this context. The list below are the coordinates for every reachable door, starting from
			-- the top left of the map and going across and down. Because their are so many buildings in the city, we enumerate them from a-z in
			-- this order

			-- Castle doors
			if (y_top == 68 and x_left >= 22 and x_right <= 24) then
				SpriteContextTransition("enter-left-castle-side", sprite);
			elseif (y_top == 70 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("enter-left-castle", sprite);
			elseif (y_top == 60 and x_left >= 96 and x_right <= 100) then
				SpriteContextTransition("enter-throne", sprite);
			elseif (y_top == 70 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("enter-right-castle", sprite);
			elseif (y_top == 68 and x_left >= 172 and x_right <= 174) then
				SpriteContextTransition("enter-left-castle-side", sprite);

			-- City structures top row
			elseif (y_top == 120 and x_left > 12 and x_right <= 16) then
				SpriteContextTransition("enter-building-a", sprite);
			elseif (y_top == 124 and x_left >= 50 and x_right <= 54) then
				SpriteContextTransition("enter-building-b", sprite); -- Pub
			elseif (y_top == 124 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("enter-building-c", sprite);
			elseif (y_top == 120 and x_left >= 140 and x_right <= 144) then
				SpriteContextTransition("enter-building-d", sprite);
			elseif (y_top == 122 and x_left >= 168 and x_right <= 172) then
				SpriteContextTransition("enter-building-e", sprite); -- Claudius' home

			--- City structures middle row
			elseif (y_top == 150 and x_left >= 20 and x_right <= 24) then
				SpriteContextTransition("enter-building-f", sprite);
			elseif (y_top == 148 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("enter-building-g", sprite);
			elseif (y_top == 150 and x_left >= 78 and x_right <= 82) then
				SpriteContextTransition("enter-building-h", sprite);
			elseif (y_top == 152 and x_left >= 148 and x_right <= 152) then
				SpriteContextTransition("enter-building-i", sprite); -- Weapon/armor shop
			elseif (y_top == 146 and x_left >= 178 and x_right <= 182) then
				SpriteContextTransition("enter-building-j", sprite);

			-- City structures bottom row
			elseif (y_top == 174 and x_left >= 22 and x_right <= 26) then
				SpriteContextTransition("enter-building-k", sprite);
			elseif (y_top == 178 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("enter-building-l", sprite);
			elseif (y_top == 178 and x_left >= 80 and x_right <= 84) then
				SpriteContextTransition("enter-building-m", sprite); -- Item shop
			elseif (y_top == 180 and x_left >= 116 and nx_right <= 120) then
				SpriteContextTransition("enter-building-n", sprite); -- Inn
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, left side entrance
			if (x_left == 84 and notification.y_top >= 60 and notification.y_bottom <= 66) then
				SpriteContextTransition("balcony-to-left-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, right side entrance
			if (x_right == 112 and notification.y_top >= 60 and notification.y_bottom <= 66) then
				SpriteContextTransition("balcony-to-right-tower", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_a"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 104 and x_left >= 160 and x_right <= 164) then
				SpriteContextTransition("upstairs-building-e", sprite);
			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("upstairs-building-n", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 60 and notification.x_position >= 96 and x_right <= 100) then
				SpriteContextTransition("throne_to_balcony", sprite);
			elseif (y_bottom == 128 and x_left >= 50 and x_right <= 54) then
				SpriteContextTransition("exit-building-b", sprite);
			elseif (y_bottom == 124 and x_left >= 168 and x_right <= 172) then
				SpriteContextTransition("exit-building-e", sprite);
			elseif (y_bottom == 182 and x_left >= 48 and x_right <= 52) then
				SpriteContextTransition("exit-building-l", sprite);
			elseif (y_bottom == 184 and x_left >= 116 and x_right <= 120) then
				SpriteContextTransition("exit-building-n", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_b"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 43 and x_left >= 42 and x_right <= 44) then
				SpriteContextTransition("upstairs-1-left-tower", sprite);
			elseif (y_top == 37 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("upstairs-2-right-tower", sprite);
			elseif (y_top == 37 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-2-right-tower", sprite);
			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
				SpriteContextTransition("upstairs-building-a", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and x_left >= 22 and x_right <= 24) then
				SpriteContextTransition("exit-left-castle-side", sprite);
			elseif (y_bottom == 70 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("exit-left-castle", sprite);
			elseif (y_bottom == 124 and x_left >= 12 and x_right <= 16) then
				SpriteContextTransition("exit-building-a", sprite);
			elseif (y_bottom == 156 and x_left >= 148 and x_right <= 152) then
				SpriteContextTransition("exit-building-i", sprite);
			elseif (y_bottom == 182 and x_left >= 80 and x_right <= 84) then
				SpriteContextTransition("exit-building-m", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and y_top >= 60 and y_bottom <= 66) then
				SpriteContextTransition("left-tower-to-balcony", sprite);
			end
		end

	elseif (sprite:GetContext() == contexts["interior_c"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 37 and x_left >= 66 and x_right <= 70) then
				SpriteContextTransition("upstairs-2-left-tower", sprite);
			elseif (y_top == 37 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("downstairs-2-left-tower", sprite);
			elseif (y_top == 43 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("upstairs-1-right-tower", sprite);
			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
				SpriteContextTransition("downstairs-building-a", sprite);
			elseif (y_top == 106 and x_left >= 160 and x_right <= 164) then
				SpriteContextTransition("downstairs-building-e", sprite);
			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-building-n", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 70 and x_left >= 120 and x_right <= 124) then
				SpriteContextTransition("exit-right-castle", sprite);
			elseif (y_bottom == 68 and x_left >= 172 and x_right <= 174) then
				SpriteContextTransition("exit-right-castle-side", sprite);
			elseif (y_bottom == 178 and x_left >= 22 and x_right <= 26) then
				SpriteContextTransition("exit-building-k", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			if (x_left == 112 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("right-tower-to-balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_d"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 126 and x_right <= 130) then
				SpriteContextTransition("downstairs-3-right-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 154 and notification.x_position >= 20 and notification.x_position <= 24) then
				SpriteContextTransition("exit-building-f", sprite);
			elseif (y_bottom == 154 and notification.x_position >= 78 and notification.x_position <= 82) then
				SpriteContextTransition("exit-building-h", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_e"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 72 and x_right <= 76) then
				SpriteContextTransition("downstairs-3-left-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 128 and notification.x_position >= 116 and notification.x_position <= 120) then
				SpriteContextTransition("exit-building-c", sprite);
			elseif (y_bottom == 152 and notification.x_position >= 48 and notification.x_position <= 52) then
				SpriteContextTransition("exit-building-g", sprite);
			elseif (y_bottom == 150 and notification.x_position >= 178 and notification.x_position <= 182) then
				SpriteContextTransition("exit-building-j", sprite);
			end
		end
	end

	if (locked_door_collision) then
		-- Prevent playing the sound multiple times concurrently if the player keeps colliding with a locked door
		if (sounds["door_locked"]:IsPlaying() == false) then
			sounds["door_locked"]:Play();
		end
	end
end


--! \brief Initiates necessary actions for a sprite to transition from one context on the map to another
--! \param transition_key An string determining what sort of transition should take place
--! \param sprite A pointer to the sprite making the transition
function SpriteContextTransition(transition_key, sprite)
	local transition_time = 1000;
	local new_context;

	sprite:SetMoving(false);
	-- Set the virtual focus to the sprite's original location.
	Map:GetVirtualFocus():MoveToObject(sprite, true);
	Map:SetCamera(Map:GetVirtualFocus());

	if (transition_key == "enter-building-a") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-b") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-c") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-d") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-e") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-f") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-g") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-h") then
		new_context = contexts["interior_d"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-i") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-j") then
		new_context = contexts["interior_e"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-k") then
		new_context = contexts["interior_c"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-l") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-m") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "enter-building-n") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-building-e") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "upstairs-building-e") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(162, 108);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "downstairs-building-e") then
		new_context = contexts["interior_a"];
		sprite:SetPosition(164, 109);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "enter_lcastle_side") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit-left-castle-side") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "balcony_to_ltower") then
		new_context = contexts["interior_b"];
		sprite:ModifyXPosition(-2, -0.5);
	elseif (transition_key == "left-tower-to-balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyXPosition(2, 0.5);
	elseif (transition_key == "balcony_to_throne") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "throne_to_balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	else
		new_context = contexts["exterior"];
		-- TODO: print warning message about unknown transition key
	end

	sprite:SetContext(new_context);
	Map:ContextTransitionBlackColor(new_context, transition_time);
	-- Animate the camera moving to the sprite's new location
	Map:SetCamera(sprite, transition_time);
	-- Prevent player from controlling sprite until transition completes
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	EventManager:StartEvent(event_sequences["pop_state"], transition_time);
end

----------------------------------------------------------------------------
---------- Draw Functions
----------------------------------------------------------------------------

function Draw()
	Map:DrawMapLayers();
end

----------------------------------------------------------------------------
---------- Event Functions
----------------------------------------------------------------------------


-- Puts game state into shop mode with items
functions["LoadItemShop"] = function()
	LoadNewShop(
		1, 4 -- healing potions
	);
end


-- Puts game state into shop mode with items
functions["LoadWeaponArmorShop"] = function()
	LoadNewShop(
		10002, 1, -- iron sword
		20001, 2, -- karlate helm
		30001, 3, -- leather chain mail
		30002, 1  -- karlate breast plate
	);
end

