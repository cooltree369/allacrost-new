--------------------------------------------------------------------------------
-- a01_harrvah_capital_aftermath.lua
--
-- The state of Harrvah after the attack map script completes. The player has free
-- control to explore the city and complete the events necessary to proceed to the
-- sand dock map to finish out the chapter.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_harrvah_capital_aftermath = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG_PRINT = true;
-- Set to non-zero to enable different conditions when loading the map (refer to the DEBUG_Load() function)
DEBUG_LOAD_STATE = 9;

data_file = "lua/data/maps/harrvah_capital.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "Harrvah Capital";

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Claudius.ogg";

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalRecords = {};

enemy_ids = { }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
event_sequences = {}; -- Holds IDs of the starting event for each event chain


-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["exterior"] = hoa_map.MapMode.CONTEXT_01; -- Displays the exterior of the town after the attack
contexts["interior_a"] = hoa_map.MapMode.CONTEXT_03;
contexts["interior_b"] = hoa_map.MapMode.CONTEXT_04;
contexts["interior_c"] = hoa_map.MapMode.CONTEXT_05;
contexts["interior_d"] = hoa_map.MapMode.CONTEXT_06;
contexts["interior_e"] = hoa_map.MapMode.CONTEXT_07;



function Load(m)
	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalRecords = Map.global_record_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(2);
	Map:AddTileLayerToOrder(3);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	CreateDialogues();
	CreateEvents();

	Map:SetCurrentTrack(0);

	-- TODO: figure out if visuals should be disabled normally, or wait for control to be given to the player before they are displayed
	-- Map:DisableIntroductionVisuals();
	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(false);
	Map:ShowDialogueIcons(true);

	Map:SetCamera(sprites["claudius"]);
	Map:SetPlayerSprite(sprites["claudius"]);

	IfPrintDebug(DEBUG, "Map loading complete");
end -- Load(m)



function Update()
	-- Nothing special required
end



function Draw()
	Map:DrawMapLayers();
end



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");
	---------- Context Zones

	-- The following zone implements the context switching for all structures found in the town.
	-- The zone sections correspond to the area just outside of the doors to these buildings.
	-- They are ordered starting from the bottom left of the map, going toward the right.
	zones["town_doors"] = hoa_map.ContextZone(contexts["exterior"], contexts["interior_a"]);
	-- Southwest home 1
	zones["town_doors"]:AddSection(22, 26, 176, 177, true);
	zones["town_doors"]:AddSection(22, 26, 175, 176, false);
	-- Soutwest home 2
	zones["town_doors"]:AddSection(48, 52, 180, 181, true);
	zones["town_doors"]:AddSection(48, 52, 179, 180, false);
	-- Item Shop
	zones["town_doors"]:AddSection(80, 84, 180, 181, true);
	zones["town_doors"]:AddSection(80, 84, 179, 180, false);
	-- Inn
	zones["town_doors"]:AddSection(116, 120, 182, 183, true);
	zones["town_doors"]:AddSection(116, 120, 181, 182, false);

	-- West home 1
	zones["town_doors"]:AddSection(20, 24, 152, 153, true);
	zones["town_doors"]:AddSection(20, 24, 151, 152, false);
	-- West home 2
	zones["town_doors"]:AddSection(48, 52, 150, 151, true);
	zones["town_doors"]:AddSection(48, 52, 149, 150, false);
	-- West home 3
	zones["town_doors"]:AddSection(78, 82, 152, 153, true);
	zones["town_doors"]:AddSection(78, 82, 151, 152, false);
	-- Weapon Shop
	zones["town_doors"]:AddSection(148, 152, 154, 155, true);
	zones["town_doors"]:AddSection(148, 152, 153, 154, false);
	-- East home
	zones["town_doors"]:AddSection(178, 182, 148, 149, true);
	zones["town_doors"]:AddSection(178, 182, 147, 148, false);

	-- Northwest home 1
	zones["town_doors"]:AddSection(12, 16, 122, 123, true);
	zones["town_doors"]:AddSection(12, 16, 121, 122, false);
	-- Northwest home 2
	zones["town_doors"]:AddSection(50, 54, 126, 127, true);
	zones["town_doors"]:AddSection(50, 54, 125, 126, false);
	-- Northeast home 1
	zones["town_doors"]:AddSection(116, 120, 126, 127, true);
	zones["town_doors"]:AddSection(116, 120, 125, 126, false);
	-- Northwest home 2
	zones["town_doors"]:AddSection(140, 144, 122, 123, true);
	zones["town_doors"]:AddSection(140, 144, 121, 122, false);
	-- Claudius' home
	zones["town_doors"]:AddSection(168, 172, 124, 125, true);
	zones["town_doors"]:AddSection(168, 172, 123, 124, false);

	Map:AddZone(zones["town_doors"]);
end



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	local sprite;

	-- The map opens with Claudius in his room
	sprite = ConstructSprite("Claudius", 1, 187, 108);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["claudius"] = sprite;

	sprite = ConstructSprite("Laila", 10, 180, 118);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["laila"] = sprite;

	sprite = ConstructSprite("Marcus", 11, 186, 112);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["marcus"] = sprite;

	sprite = ConstructSprite("Vanica", 12, 166, 112);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["vanica"] = sprite;

	-- Sprites roaming around the town


	-- Sprites inside the inn, shops, or pub
	sprite = ConstructSprite("Man01", 510, 144, 140);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_a"]);
	sprites["weapon_merchant"] = sprite;

	sprite = ConstructSprite("Female Merchant", 520, 73, 173);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_b"]);
	sprites["item_merchant"] = sprite;

	sprite = ConstructSprite("Octavia", 530, 118, 168);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior_c"]);
	sprites["inn_keeper"] = sprite;

	sprite = ConstructSprite("Livia", 531, 113, 174);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior_c"]);
	sprites["inn_worker"] = sprite;

	-- Sprites inside of homes


	-- Sprites near and around the castle


	-- Sprites inside the left side of the castle


	-- Sprites inside the right side of the castle


	-- Sprites near and inside the throne room

end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG, "Creating enemies...");
	-- No enemies on this map
end



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(100);
		text = hoa_system.Translate("Welcome home, Claudius. What's the matter?");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
		text = hoa_system.Translate("It's...nothing. I'm just glad you're okay.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
	sprites["laila"]:AddDialogueReference(100);

	dialogue = hoa_map.MapDialogue.Create(101);
		text = hoa_system.Translate("Oh dear, oh dear.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());
	sprites["vanica"]:AddDialogueReference(101);

	dialogue = hoa_map.MapDialogue.Create(102);
		text = hoa_system.Translate("Your mother and I are doing what we can for those who lost their homes in the attack.");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
		text = hoa_system.Translate("Let me help. Show me where I can make myself useful.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("No, you need to rest. We may be attacked again you know, and how are you going to defend our city if you're exhausted?");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
	sprites["marcus"]:AddDialogueReference(102);

	dialogue = hoa_map.MapDialogue.Create(103);
		text = hoa_system.Translate("Sorry, this inn has converted into a shelter after the attack and we're completely full.");
		dialogue:AddLine(text, sprites["inn_keeper"]:GetObjectID());
	sprites["inn_keeper"]:AddDialogueReference(103);

	dialogue = hoa_map.MapDialogue.Create(104);
		text = hoa_system.Translate("So much work to do. I'm exhausted.");
		dialogue:AddLine(text, sprites["inn_worker"]:GetObjectID());
	sprites["inn_worker"]:AddDialogueReference(104);

	dialogue = hoa_map.MapDialogue.Create(105);
		text = hoa_system.Translate("Most of my inventory was destroyed in the attack.");
		dialogue:AddLine(text, sprites["item_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1000); -- event_chains["item_shop"]
	sprites["item_merchant"]:AddDialogueReference(105);

	dialogue = hoa_map.MapDialogue.Create(106);
		text = hoa_system.Translate("Demand has skyrocketed after our city was attacked. I've sold most of my armaments, but I have a few selections remaining.");
		dialogue:AddLine(text, sprites["weapon_merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1001); -- event_chains["weapon_armor_shop"] = 1001;
	sprites["weapon_merchant"]:AddDialogueReference(106);

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------


end -- function CreateDialogues()


-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	local event = {};
	local event_id;

	---------- Miscellaneous Events
	event_sequences["pop_state"] = 10000;
	event = hoa_map.PopMapStateEvent.Create(event_sequences["pop_state"]);
end -- function CreateEvents()

----------------------------------------------------------------------------
---------- Update Functions
----------------------------------------------------------------------------

function Update()
	-- Process all notification events that we care about
	local index = 0;
	local notification = {};

	while (true) do
		notification = NotificationManager:GetNotificationEvent(index);
		if (notification == nil) then
			break;
		elseif (notification.category == "map" and notification.event == "collision") then
			HandleCollisionNotification(notification);
		end

		index = index + 1;
	end

	-- Check map zones for necessary actions

end


-- Processes collision notifications and takes appropriate action depending on the type and location of the collision
function HandleCollisionNotification(notification)
	-- We're only concerned with collisions by the player sprite for this map
	local sprite = notification.sprite;
	if (sprite:GetObjectID() ~= Map:GetPlayerSprite():GetObjectID()) then
		return;
	elseif (notification.collision_type == hoa_map.MapMode.OBJECT_COLLISION) then
		return;
	end

	-- Determine the positions of each side of the sprite's collision rectangle
	local x_left = RoundToInteger(notification.x_position + notification.x_offset - sprite:GetCollHalfWidth());
	local x_right = RoundToInteger(notification.x_position + notification.x_offset + sprite:GetCollHalfWidth());
	local y_top = RoundToInteger(notification.y_position + notification.y_offset - sprite:GetCollHeight());
	local y_bottom = RoundToInteger(notification.y_position + notification.y_offset);

	local locked_door_collision = false;
	-- Collisions should now be checked to see if they play a "locked door" sound, or start a context switch
	if (sprite:GetContext() == contexts["exterior"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			-- There are a lot of south-facing doors, some which are locked (play a sound) and others which need to trigger a context switch
			-- The list below are the coordinates for every reachable door, starting from the top left of the map and going across and down
			-- TODO: there's probably a better/faster way to do this position checking (a lookup table?). For now this solution works fine though
			-- Castle doors
			if (y_top == 68 and notification.x_position >= 22 and notification.x_position <= 24) then
				SpriteContextTransition("enter_lcastle_side", sprite);
			elseif (y_top == 60 and notification.x_position >= 96 and notification.x_position <= 100) then
				SpriteContextTransition("balcony_to_throne", sprite);
			-- City top row doors
			elseif (y_top == 120 and notification.x_position > 12 and notification.x_position <= 16) then
				locked_door_collision = true;
			elseif (y_top == 124 and notification.x_position >= 50 and notification.x_position <= 54) then
				locked_door_collision = true;
			elseif (y_top == 124 and notification.x_position >= 116 and notification.x_position <= 120) then
				locked_door_collision = true;
			elseif (y_top == 120 and notification.x_position >= 140 and notification.x_position <= 144) then
				locked_door_collision = true;
			elseif (y_top == 122 and notification.x_position >= 168 and notification.x_position <= 172) then
				SpriteContextTransition("home_inside", sprite);
			-- City middle row doors
			elseif (y_top == 150 and notification.x_position >= 20 and notification.x_position <= 24) then
				locked_door_collision = true;
			elseif (y_top == 148 and notification.x_position >= 48 and notification.x_position <= 52) then
				locked_door_collision = true;
			elseif (y_top == 150 and notification.x_position >= 78 and notification.x_position <= 82) then
				locked_door_collision = true;
			elseif (y_top == 152 and notification.x_position >= 148 and notification.x_position <= 152) then
				locked_door_collision = true;
			elseif (y_top == 146 and notification.x_position >= 178 and notification.x_position <= 182) then
				locked_door_collision = true;
			-- City bottom row doors
			elseif (y_top == 174 and notification.x_position >= 22 and notification.x_position <= 26) then
				locked_door_collision = true;
			elseif (y_top == 178 and notification.x_position >= 48 and notification.x_position <= 52) then
				locked_door_collision = true;
			elseif (y_top == 178 and notification.x_position >= 80 and notification.x_position <= 84) then
				locked_door_collision = true;
			elseif (y_top == 180 and notification.x_position >= 116 and notification.x_position <= 120) then
				locked_door_collision = true;
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, left side entrance
			if (x_left == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("balcony_to_ltower", sprite);
			end
			-- x22-24, y68 = left side door
			-- x96-100, y60 = throne room
		end
	elseif (sprite:GetContext() == contexts["interior_a"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 104 and x_left >= 160 and x_right <= 164) then
				SpriteContextTransition("home_upstairs", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 124 and x_left >= 168 and x_right <= 172) then
				SpriteContextTransition("home_outside", sprite);
			elseif (y_bottom == 60 and notification.x_position >= 96 and notification.x_position <= 100) then
				SpriteContextTransition("throne_to_balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_b"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and notification.x_position >= 22 and notification.x_position <= 24) then
				SpriteContextTransition("exit_lcastle_side", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("ltower_to_balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_c"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 106 and x_left >= 160 and x_right <= 164) then
				SpriteContextTransition("home_downstairs", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("ltower_to_balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_d"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and notification.x_position >= 22 and notification.x_position <= 24) then
				SpriteContextTransition("exit_lcastle_side", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and notification.y_position > 60 and notification.y_position <= 66) then
				SpriteContextTransition("ltower_to_balcony", sprite);
			end
		end
	elseif (sprite:GetContext() == contexts["interior_e"]) then

	end

	if (locked_door_collision) then
		-- Prevent playing the sound multiple times concurrently if the player keeps colliding with a locked door
		if (sounds["door_locked"]:IsPlaying() == false) then
			sounds["door_locked"]:Play();
		end
	end
end


--! \brief Initiates necessary actions for a sprite to transition from one context on the map to another
--! \param transition_key An string determining what sort of transition should take place
--! \param sprite A pointer to the sprite making the transition
function SpriteContextTransition(transition_key, sprite)
	local transition_time = 1000;
	local new_context;

	sprite:SetMoving(false);
	-- Set the virtual focus to the sprite's original location.
	Map:GetVirtualFocus():MoveToObject(sprite, true);
	Map:SetCamera(Map:GetVirtualFocus());

	if (transition_key == "home_inside") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "home_outside") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "home_upstairs") then
		new_context = contexts["interior_c"];
		sprite:SetPosition(162, 108);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "home_downstairs") then
		new_context = contexts["interior_a"];
		sprite:SetPosition(164, 109);
		sprite:SetDirection(hoa_map.MapMode.SOUTH);
	elseif (transition_key == "enter_lcastle_side") then
		new_context = contexts["interior_b"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "exit_lcastle_side") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	elseif (transition_key == "balcony_to_ltower") then
		new_context = contexts["interior_b"];
		sprite:ModifyXPosition(-2, -0.5);
	elseif (transition_key == "ltower_to_balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyXPosition(2, 0.5);
	elseif (transition_key == "balcony_to_throne") then
		new_context = contexts["interior_a"];
		sprite:ModifyYPosition(-2, -0.5);
	elseif (transition_key == "throne_to_balcony") then
		new_context = contexts["exterior"];
		sprite:ModifyYPosition(2, 0.5);
	else
		new_context = contexts["exterior"];
		-- TODO: print warning message about unknown transition key
	end

	sprite:SetContext(new_context);
	Map:ContextTransitionBlackColor(new_context, transition_time);
	-- Animate the camera moving to the sprite's new location
	Map:SetCamera(sprite, transition_time);
	-- Prevent player from controlling sprite until transition completes
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	EventManager:StartEvent(event_sequences["pop_state"], transition_time);
end

----------------------------------------------------------------------------
---------- Draw Functions
----------------------------------------------------------------------------

function Draw()
	Map:DrawMapLayers();
end

----------------------------------------------------------------------------
---------- Event Functions
----------------------------------------------------------------------------


-- Puts game state into shop mode with items
functions["LoadItemShop"] = function()
	LoadNewShop(
		1, 4 -- healing potions
	);
end


-- Puts game state into shop mode with items
functions["LoadWeaponArmorShop"] = function()
	LoadNewShop(
		10002, 1, -- iron sword
		20001, 2, -- karlate helm
		30001, 3, -- leather chain mail
		30002, 1  -- karlate breast plate
	);
end

