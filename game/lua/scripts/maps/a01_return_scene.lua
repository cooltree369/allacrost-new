--------------------------------------------------------------------------------
-- 01_return_scene.lua
--
-- Similar to a01_opening_scene.lua and using the same map. The entire map is a
-- scene of soldiers marching through the desert back to their homes.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_return_scene = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG = true; 

data_file = "lua/data/maps/harrvah_desert_cave_path.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "";

sound_filenames = {};

music_filenames = {};

enemy_ids = {};

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalEvents = {};

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
events = {};

-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions. 
functions = {};

-- Shorthand names for map contexts
contexts["base"] = hoa_map.MapMode.CONTEXT_01; -- The only context for this map


function Load(m)
	Map = m;

	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalEvents = Map.map_event_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(2);

	CreateSprites();
	CreateDialogues();
	CreateEvents();

	VideoManager:EnableLightOverlay(hoa_video.Color(0.0, 0.0, 0.3, 0.6));

	Map:DisableIntroductionVisuals();
	Map:ShowStaminaBar(false);
	Map:ShowDialogueIcons(false);

	-- This entire map is played out in scene state. As soon as the map is loaded, we start the chain of events.
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	Map:SetPlayerSprite(sprites["claudius"]);
	Map:SetCamera(sprites["claudius"]);
	EventManager:StartEvent(event_chains["march"]);
	IfPrintDebug(DEBUG, "Map loading complete");
end



function Update()
	-- TODO: add a point light on left side of screen representing the city ablaze with gradually increasing intensity
end



function Draw()
	Map:DrawMapLayers();
end

--------------------------------------------------------------------------------
-- Setup functions
--------------------------------------------------------------------------------

-- Creates the sprites for all characters in the party
function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	-- Global starting coordinates for the center of the group of knights. All sprites
	-- use these coordinates in determining their initial positions.
	local start_x = 300;
	local start_y = 24;

	-- Character sprites are in the center of the formation
	sprites["claudius"] = ConstructSprite("Claudius", 10, start_x + 0.5, start_y + 0.5);
	sprites["claudius"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["claudius"]:SetNoCollision(true);
	sprites["claudius"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["claudius"]);

	sprites["mark"] = ConstructSprite("Knight01", 11, start_x + 1.5, start_y + 3);
	sprites["mark"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["mark"]:SetName(hoa_system.Translate("Mark"));
	sprites["mark"]:SetNoCollision(true);
	sprites["mark"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["mark"]);

	sprites["lukar"] = ConstructSprite("Knight01", 12, start_x + 2, start_y - 2);
	sprites["lukar"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["lukar"]:SetName(hoa_system.Translate("Lukar"));
	sprites["lukar"]:SetNoCollision(true);
	sprites["lukar"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["lukar"]);

	-- Knight leaders are in the front and center part of the formation
	sprites["captain"] = ConstructSprite("Knight06", 20, start_x - 3.5, start_y - 1);
	sprites["captain"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["captain"]:SetName(hoa_system.Translate("Captain Bravis"));
	sprites["captain"]:SetNoCollision(true);
	sprites["captain"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["captain"]);

	sprites["sergeant"] = ConstructSprite("Knight05", 21, start_x - 4, start_y + 2);
	sprites["sergeant"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["sergeant"]:SetName(hoa_system.Translate("Sergeant Methus"));
	sprites["sergeant"]:SetNoCollision(true);
	sprites["sergeant"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["sergeant"]);

	sprites["knight01"] = ConstructSprite("Knight04", 22, start_x - 3, start_y + 4);
	sprites["knight01"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight01"]:SetNoCollision(true);
	sprites["knight01"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight01"]);

	-- Other sprites are scattered around the center and front sprites
	sprites["knight02"] = ConstructSprite("Knight01", 30, start_x - 1.5, start_y - 3);
	sprites["knight02"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight02"]:SetNoCollision(true);
	sprites["knight02"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight02"]);

	sprites["knight03"] = ConstructSprite("Knight01", 31, start_x - 3.5, start_y - 5.5);
	sprites["knight03"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight03"]:SetNoCollision(true);
	sprites["knight03"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight03"]);

	sprites["knight04"] = ConstructSprite("Knight03", 32, start_x - 5, start_y - 4);
	sprites["knight04"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight04"]:SetNoCollision(true);
	sprites["knight04"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight04"]);

	sprites["knight05"] = ConstructSprite("Knight03", 33, start_x - 0.5, start_y + 6);
	sprites["knight05"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight05"]:SetNoCollision(true);
	sprites["knight05"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight05"]);

	sprites["knight06"] = ConstructSprite("Knight02", 34, start_x + 4, start_y);
	sprites["knight06"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight06"]:SetNoCollision(true);
	sprites["knight06"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight06"]);

	sprites["knight07"] = ConstructSprite("Knight02", 35, start_x + 6.5, start_y + 1.5);
	sprites["knight07"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight07"]:SetNoCollision(true);
	sprites["knight07"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight07"]);

	sprites["knight08"] = ConstructSprite("Knight03", 36, start_x + 8, start_y - 1);
	sprites["knight08"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight08"]:SetNoCollision(true);
	sprites["knight08"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight08"]);

	-- Mak sprites and their handlers are in the rear edges of the formation
	sprites["knight09"] = ConstructSprite("Knight02", 40, start_x + 4, start_y - 4.5);
	sprites["knight09"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight09"]:SetNoCollision(true);
	sprites["knight09"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight09"]);

	sprites["mak1"] = ConstructSprite("Mak Hound", 41, start_x + 8, start_y - 4);
	sprites["mak1"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["mak1"]:SetNoCollision(true);
	sprites["mak1"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["mak1"]);

	sprites["knight10"] = ConstructSprite("Knight02", 42, start_x + 3, start_y + 5.5);
	sprites["knight10"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["knight10"]:SetNoCollision(true);
	sprites["knight10"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["knight10"]);

	sprites["mak2"] = ConstructSprite("Mak Hound", 43, start_x + 7, start_y + 4.5);
	sprites["mak2"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["mak2"]:SetNoCollision(true);
	sprites["mak2"]:GetAnimation(hoa_map.MapMode.ANIM_WALKING_WEST):RandomizeCurrentLoopProgress();
	ObjectManager:AddObject(sprites["mak2"]);
	
	-- This sprite is the scout that runs in from the left side of the screen
	sprites["knight_scout"] = ConstructSprite("Knight01", 50, 20, start_y);
	sprites["knight_scout"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight_scout"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["knight_scout"]);
end


-- Creates all dialogue that takes place through characters and events
function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	event_dialogues = {}; -- Holds IDs of the dialogues used during events
	local dialogue;
	local text;

	event_dialogues["march_start"] = 10;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["march_start"]);
		dialogue:SetInputBlocked(true);
		text = hoa_system.Translate("I can't wait to get back home. Maybe now that the water supply is restored they'll finally let us bathe again. I've been covered in sand for days.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		dialogue:AddLineTiming(8000);

	event_dialogues["red_sky"] = 20;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["red_sky"]);
		dialogue:SetInputBlocked(true);
		text = hoa_system.Translate("That's odd, the sky is brighter in the direction of the city.");
		dialogue:AddLine(text, sprites["knight01"]:GetObjectID());
		dialogue:AddLineTiming(4000);
		text = hoa_system.Translate("I bet the citizens are out celebrating now that the water's returned. They're probably preparing to welcome us back as heroes!");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		dialogue:AddLineTiming(7000);
		text = hoa_system.Translate("Maybe, but who would still be awake at this hour?");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		dialogue:AddLineTiming(3000);
		text = hoa_system.Translate("Our scout should be returning soon, we'll find out then.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());
		dialogue:AddLineTiming(4000);

	event_dialogues["scout_report"] = 30;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["scout_report"]);
		text = hoa_system.Translate("Captain Bravis!");
		dialogue:AddLine(text, sprites["knight_scout"]:GetObjectID());
		dialogue:AddLineTiming(3000);
		text = hoa_system.Translate("Catch your breath soldier. What's wrong?");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		dialogue:AddLineTiming(4000);
		text = hoa_system.Translate("The city!\n*huff*\nThe city...it's ablaze!");
		dialogue:AddLine(text, sprites["knight_scout"]:GetObjectID());
		dialogue:AddLineTiming(3000);
end


-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	event_chains = {};
	local event = {};

	-- Move all sprites away from the cave entrance
	local march_distance = -220;
	local total_march_distance = 280;

	event_chains["march"] = 10;
	event_chains["dialogue"] = 50;
	event_chains["sprint"] = 100;

	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"], sprites["claudius"], march_distance, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtStart(event_chains["march"] + 1);
	event:AddEventLinkAtStart(event_chains["march"] + 2);
	event:AddEventLinkAtStart(event_chains["march"] + 3);
	event:AddEventLinkAtStart(event_chains["march"] + 4);
	event:AddEventLinkAtStart(event_chains["march"] + 5);
	event:AddEventLinkAtStart(event_chains["march"] + 6);
	event:AddEventLinkAtStart(event_chains["march"] + 7);
	event:AddEventLinkAtStart(event_chains["march"] + 8);
	event:AddEventLinkAtStart(event_chains["march"] + 9);
	event:AddEventLinkAtStart(event_chains["march"] + 10);
	event:AddEventLinkAtStart(event_chains["march"] + 11);
	event:AddEventLinkAtStart(event_chains["march"] + 12);
	event:AddEventLinkAtStart(event_chains["march"] + 13);
	event:AddEventLinkAtStart(event_chains["march"] + 14);
	event:AddEventLinkAtStart(event_chains["march"] + 15);
	event:AddEventLinkAtStart(event_chains["march"] + 16);
	event:AddEventLinkAtStart(event_chains["dialogue"], 3000);
	event:AddEventLinkAtStart(event_chains["dialogue"] + 1, 12000);

	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 1, sprites["mark"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 2, sprites["sergeant"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 3, sprites["lukar"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 4, sprites["captain"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 5, sprites["knight01"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 6, sprites["knight02"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 7, sprites["knight03"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 8, sprites["knight04"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 9, sprites["knight05"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 10, sprites["knight06"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 11, sprites["knight07"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 12, sprites["knight08"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 13, sprites["knight09"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 14, sprites["knight10"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 15, sprites["mak1"], march_distance, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["march"] + 16, sprites["mak2"], march_distance, 0);
	event:SetRelativeDestination(true);

	-- Create the dialogue events
	event = hoa_map.DialogueEvent.Create(event_chains["dialogue"] + 0, event_dialogues["march_start"]);
	event = hoa_map.DialogueEvent.Create(event_chains["dialogue"] + 1, event_dialogues["red_sky"]);
	event:AddEventLinkAtEnd(event_chains["dialogue"] + 2); -- The scout moves towards the main party as the dialogue ends
	event:AddEventLinkAtEnd(event_chains["dialogue"] + 3, 2000); -- The scout makes his report
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["dialogue"] + 2, sprites["knight_scout"], (total_march_distance + march_distance) - 5, 0);
	event:SetRelativeDestination(true);
	event = hoa_map.DialogueEvent.Create(event_chains["dialogue"] + 3, event_dialogues["scout_report"]);
	event:AddEventLinkAtEnd(event_chains["sprint"]);

	-- Change movement speed of all sprites
	event = hoa_map.CustomEvent.Create(event_chains["sprint"] + 0, "ChangeSpriteMovementSpeed", "");
	event:AddEventLinkAtStart(event_chains["sprint"] + 1);
	event:AddEventLinkAtStart(event_chains["sprint"] + 2);
	event:AddEventLinkAtStart(event_chains["sprint"] + 3);
	event:AddEventLinkAtStart(event_chains["sprint"] + 4);
	event:AddEventLinkAtStart(event_chains["sprint"] + 5);
	event:AddEventLinkAtStart(event_chains["sprint"] + 6);
	event:AddEventLinkAtStart(event_chains["sprint"] + 7);
	event:AddEventLinkAtStart(event_chains["sprint"] + 8);
	event:AddEventLinkAtStart(event_chains["sprint"] + 9);
	event:AddEventLinkAtStart(event_chains["sprint"] + 10);
	event:AddEventLinkAtStart(event_chains["sprint"] + 11);
	event:AddEventLinkAtStart(event_chains["sprint"] + 12);
	event:AddEventLinkAtStart(event_chains["sprint"] + 13);
	event:AddEventLinkAtStart(event_chains["sprint"] + 14);
	event:AddEventLinkAtStart(event_chains["sprint"] + 15);
	event:AddEventLinkAtStart(event_chains["sprint"] + 16);
	event:AddEventLinkAtStart(event_chains["sprint"] + 17);
	event:AddEventLinkAtStart(event_chains["sprint"] + 18);
	event:AddEventLinkAtStart(event_chains["sprint"] + 19, 2000);
	event:AddEventLinkAtStart(event_chains["sprint"] + 20, 2000);
	-- Rush off to the city
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 1, sprites["claudius"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 2, sprites["mark"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 3, sprites["lukar"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 4, sprites["captain"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 5, sprites["sergeant"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 6, sprites["knight01"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 7, sprites["knight02"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 8, sprites["knight03"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 9, sprites["knight04"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 10, sprites["knight05"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 11, sprites["knight06"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 12, sprites["knight07"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 13, sprites["knight08"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 14, sprites["knight09"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 15, sprites["knight10"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 16, sprites["mak1"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 17, sprites["mak2"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["sprint"] + 18, sprites["knight_scout"], -(total_march_distance + march_distance), 0);
	event:SetRelativeDestination(true);
	event = hoa_map.MapTransitionEvent.Create(event_chains["sprint"] + 19, "lua/scripts/maps/a01_harrvah_capital_attack.lua");
	event = hoa_map.CustomEvent.Create(event_chains["sprint"] + 20, "FreezeCamera", "");
end -- function CreateEvents()


-- Changes the speed of every sprite as they sprint toward the city
functions["ChangeSpriteMovementSpeed"] = function()
	sprites["claudius"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["mark"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["lukar"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["captain"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["sergeant"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight01"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight02"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight03"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight04"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight05"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight06"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight07"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight08"]:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
	sprites["knight09"]:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprites["knight10"]:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprites["mak1"]:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
	sprites["mak2"]:SetMovementSpeed(hoa_map.MapMode.FAST_SPEED);
end

-- Moves the virtual focus to the position of the camera and moves the camera focus to it
functions["FreezeCamera"] = function()
	Map:MoveVirtualFocus(Map.camera.x_position, Map.camera.y_position);
	Map:SetCamera(Map.virtual_focus);
end

