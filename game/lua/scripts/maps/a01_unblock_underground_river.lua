--------------------------------------------------------------------------------
-- a01_unblock_underground_river.lua
--
-- Main storyline event. The first dungeon encountered in the game, the player
-- makes his way through a cave to a riverbed, where a boss enemy is encountered.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_unblock_underground_river = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG = false; 

data_file = "lua/data/maps/harrvah_underground_river_cave.lua";
location_filename = "img/portraits/locations/desert_cave.png"
map_name = "River Access Cave"

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Cave2.ogg";

-- Primary Map Classes
Map = {};
ObjectManager = {};
DialogueManager = {};
EventManager = {};
TreasureManager = {};
GlobalEvents = {};

enemy_ids = { 1, 2, 3, 4, 5, 6 }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
events = {};

-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions. 
functions = {};

-- Shorthand names for map contexts
contexts["base"] = hoa_map.MapMode.CONTEXT_01; -- Upon first entering the cave
contexts["collapsed"] = hoa_map.MapMode.CONTEXT_02; -- Active context after the passage collapse event
contexts["unblocked"] = hoa_map.MapMode.CONTEXT_03; -- Active context after the river obstruction has been removed



function Load(m)
	-- Setup global pointers for the MapMode instance as well as the various supervisors for convenience
	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	TreasureManager = Map.treasure_supervisor;
	GlobalEvents = Map.map_event_group;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(2);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	CreateDialogues();
	CreateEvents();

	-- Visual effects: dark lighting, various light halos
	VideoManager:EnableLightOverlay(hoa_video.Color(0.0, 0.0, 0.0, 0.7));
	
	Map:SetCurrentTrack(0);

	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(true);
	Map:ShowDialogueIcons(true);

	-- Spawn all enemies for each enemy zone
	zones["enemy01"]:ForceSpawnAllEnemies();
	zones["enemy02"]:ForceSpawnAllEnemies();
	zones["enemy03"]:ForceSpawnAllEnemies();
	zones["enemy04"]:ForceSpawnAllEnemies();
	zones["enemy05"]:ForceSpawnAllEnemies();
	zones["enemy06"]:ForceSpawnAllEnemies();
	zones["enemy07"]:ForceSpawnAllEnemies();

	-- The map begins with an opening scene before control is given to the player
	Map:SetPlayerSprite(sprites["claudius"]);
	Map:SetCamera(sprites["claudius"]);
	Map:MoveVirtualFocus(80, 130);
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	EventManager:StartEvent(events["opening_dialogue"], 2500);
	IfPrintDebug(DEBUG, "Map loading complete");
end -- function Load(m)



function Update()
	-- TODO: setup a scripted battle for the first enemy encounter
	--[[
	if ((zones["first_enemy_encounter"]:IsCameraEntering() == true)) then
		if (GlobalEvents:DoesEventExist("first_enemy_encounter") == false) then
			GlobalEvents:AddNewEvent("first_enemy_encounter", 1);
			Map.camera:SetMoving(false);
			EventManager:StartEvent(event_chains["first_enemy"]);
		end
	end
	--]]

	if (GlobalEvents:DoesEventExist("corpse_seen") == false) then
		if (zones["corpse_discovery"]:IsPlayerSpriteEntering() == true) then
			GlobalEvents:AddNewEvent("corpse_seen", 1);
			EventManager:StartEvent(event_chains["find_corpse"]);
		end
	end

	if (GlobalEvents:DoesEventExist("passage_collapsed") == false) then
		if (zones["prevent_long_route"]:IsPlayerSpriteEntering() == true and Map:CurrentState() == hoa_map.MapMode.STATE_EXPLORE) then	
			EventManager:StartEvent(event_chains["follow_short_route"]);
		end
	end
	
--	if (zones["short_route"]:IsCameraEntering() == true) then
--		if (GlobalEvents:DoesEventExist("knight_moved") == false) then
--			GlobalEvents:AddNewEvent("knight_moved", 1);
--			EventManager:StartEvent(event_chains["observe_passing"]);
--		end
--	end
	
	if (GlobalEvents:DoesEventExist("passage_collapsed") == false) then
		if (zones["collapse"]:IsPlayerSpriteEntering() == true) then
			GlobalEvents:AddNewEvent("passage_collapsed", 1);
			EventManager:StartEvent(event_chains["passage_collapse"]);
		end
	end

	if ((zones["forward_passage"]:IsPlayerSpriteEntering() == true) and (Map.player_sprite:IsVisible() == true)) then
		EventManager:StartEvent(event_chains["pass_wall_forward"]);
	end
	
	if ((zones["backward_passage"]:IsPlayerSpriteEntering() == true) and (Map.player_sprite:IsVisible() == true)) then
		EventManager:StartEvent(event_chains["pass_wall_backward"]);
	end
	
	if (GlobalEvents:DoesEventExist("spring_discovered") == false) then
		if ((zones["spring_discovery"]:IsPlayerSpriteEntering() == true)) then	
			GlobalEvents:AddNewEvent("spring_discovered", 1);
			Map.camera:SetMoving(false);
			EventManager:StartEvent(event_chains["spring_arrival"]);
		end
	end
	
	if (GlobalEvents:DoesEventExist("riverbed_arrival") == false) then
		if ((zones["riverbed_arrival"]:IsPlayerSpriteEntering() == true)) then	
			GlobalEvents:AddNewEvent("riverbed_arrival", 1);
			EventManager:StartEvent(event_chains["riverbed_arrival"]);
		end
	end
end -- function Update()



function Draw()
	Map:DrawMapLayers();
end



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");

	---------- Event Trigger Zones
	zones["first_enemy_encounter"] = hoa_map.CameraZone(6, 20, 184, 186, contexts["base"]);
	Map:AddZone(zones["first_enemy_encounter"]);

	zones["corpse_discovery"] = hoa_map.CameraZone(180, 182, 134, 140, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["corpse_discovery"]);

	zones["prevent_long_route"] = hoa_map.CameraZone(132, 136, 70, 80, contexts["base"]);
	Map:AddZone(zones["prevent_long_route"]);

	zones["collapse"] = hoa_map.CameraZone(186, 189, 60, 63, contexts["base"]);
	Map:AddZone(zones["collapse"]);	

	zones["forward_passage"] = hoa_map.CameraZone(78, 79, 6, 7, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["forward_passage"]);

	zones["backward_passage"] = hoa_map.CameraZone(110, 111, 20, 21, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["backward_passage"]);

	zones["spring_discovery"] = hoa_map.CameraZone(171, 186, 5, 10, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["spring_discovery"]);

	zones["riverbed_arrival"] = hoa_map.CameraZone(220, 221, 2, 11, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["riverbed_arrival"]);

	---------- Enemy Zones
	-- Zone #01: Near ceiling overpass entrance and around corpse
	zones["enemy01"] = hoa_map.EnemyZone(6, 20, 162, 186);
	Map:AddZone(zones["enemy01"]);

	-- Zone #02: First turn after the cave entrance
	zones["enemy02"] = hoa_map.EnemyZone(36, 79, 130, 141);
	Map:AddZone(zones["enemy02"]);

	-- Zone #03: Along narrow southern passage between pit and wall
	zones["enemy03"] = hoa_map.EnemyZone(108, 140, 145, 148);
	Map:AddZone(zones["enemy03"]);
	
	-- Zone #04: South of ceiling overpass
	zones["enemy04"] = hoa_map.EnemyZone(146, 157, 90, 120);
	Map:AddZone(zones["enemy04"]);
	
	-- Zone #05: Wide open area at beginning of long route
	zones["enemy05"] = hoa_map.EnemyZone(26, 115, 68, 89);
	Map:AddZone(zones["enemy05"]);
	
	-- Zone #06: Above pits and before wall passage
	zones["enemy06"] = hoa_map.EnemyZone(24, 80, 8, 46);
	Map:AddZone(zones["enemy06"]);
	
	-- Zone #07: After the wall passage and before the spring
	zones["enemy07"] = hoa_map.EnemyZone(116, 143, 6, 40);
	Map:AddZone(zones["enemy07"]);
end -- function CreateZones()



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");

	local object = {};
	local treasure = {};

	-- TODO: Move this treasure deeper into the cave instead of near the entrance
	object = hoa_map.TreasureObject("img/misc/chest1.png", 4, 1, 1);
	object:SetObjectID(1001);
	object:SetXPosition(35, 0);
	object:SetYPosition(6, 0);
	treasure = object:GetTreasure();
	treasure:AddDrunes(75);
	treasure:AddObject(1, 2);
	ObjectManager:AddObject(object);
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	----------------------------------------------------------------------------
	---------- Create character party sprites
	----------------------------------------------------------------------------
	-- Group #1: Playable character sprites
	sprites["claudius"] = ConstructSprite("Claudius", 1, 11, 227);
	sprites["claudius"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["claudius"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["claudius"]);

	sprites["mark"] = ConstructSprite("Knight01", 2, 17, 227);
	sprites["mark"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["mark"]:SetNoCollision(true);
	sprites["mark"]:SetName(hoa_system.Translate("Mark"));
	ObjectManager:AddObject(sprites["mark"]);
	
	sprites["lukar"] = ConstructSprite("Knight01", 3, 14, 225);
	sprites["lukar"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["lukar"]:SetNoCollision(true);
	sprites["lukar"]:SetName(hoa_system.Translate("Lukar"));
	ObjectManager:AddObject(sprites["lukar"]);

	----------------------------------------------------------------------------
	---------- Create NPCs in roughly the order encountered by the player
	----------------------------------------------------------------------------
	-- Knight near cave entrance serving as a guide
	sprites["entrance_knight"] = ConstructSprite("Knight01", 10, 14, 148);
	sprites["entrance_knight"]:SetDirection(hoa_map.MapMode.SOUTH);
	ObjectManager:AddObject(sprites["entrance_knight"]);
	
	-- Knight guiding others through the short passage
	sprites["passage_knight1"] = ConstructSprite("Knight03", 20, 156, 62.5);
	sprites["passage_knight1"]:SetDirection(hoa_map.MapMode.EAST);
	ObjectManager:AddObject(sprites["passage_knight1"]);
	
	-- Knight seen walking ahead through the short passage
	sprites["passage_knight2"] = ConstructSprite("Knight02", 21, 158, 62.5);
	sprites["passage_knight2"]:SetDirection(hoa_map.MapMode.WEST);
	ObjectManager:AddObject(sprites["passage_knight2"]);
	
	-- Knight with injured ankle near the end of the long passage
	sprites["injury_knight1"] = ConstructSprite("Knight03", 30, 164, 19);
	sprites["injury_knight1"]:SetDirection(hoa_map.MapMode.EAST);
	ObjectManager:AddObject(sprites["injury_knight1"]);
	
	-- Knight assisting the injured knight
	sprites["injury_knight2"] = ConstructSprite("Knight01", 31, 166, 20);
	sprites["injury_knight2"]:SetDirection(hoa_map.MapMode.WEST);
	ObjectManager:AddObject(sprites["injury_knight2"]);

	-- All of the following NPCs are encountered at the end of the cave in the riverbed
	sprites["captain"] = ConstructSprite("Knight06", 2500, 248, 16);
	sprites["captain"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["captain"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["captain"]);

	sprites["sergeant"] = ConstructSprite("Knight05", 2501, 249, 19);
	sprites["sergeant"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["sergeant"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["sergeant"]);
	
	sprites["river_knight1"] = ConstructSprite("Knight04", 2502, 245, 11);
	sprites["river_knight1"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight1"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight1"]);
	
	sprites["river_knight2"] = ConstructSprite("Knight03", 2503, 242, 8);
	sprites["river_knight2"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight2"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight2"]);
	
	sprites["river_knight3"] = ConstructSprite("Knight02", 2504, 239, 9);
	sprites["river_knight3"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight3"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight3"]);

	sprites["river_knight4"] = ConstructSprite("Knight01", 2505, 240, 22);
	sprites["river_knight4"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight4"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight4"]);

	sprites["river_knight5"] = ConstructSprite("Knight02", 2506, 243, 23);
	sprites["river_knight5"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight5"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight5"]);
	
	sprites["river_knight6"] = ConstructSprite("Knight03", 2507, 245, 21);
	sprites["river_knight6"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight6"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight6"]);
	
	sprites["river_knight7"] = ConstructSprite("Knight01", 2508, 234, 20);
	sprites["river_knight7"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight7"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight7"]);
	
	sprites["river_knight8"] = ConstructSprite("Knight01", 2509, 233, 17);
	sprites["river_knight8"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight8"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight8"]);
	
	sprites["river_knight9"] = ConstructSprite("Knight02", 2510, 235, 14);
	sprites["river_knight9"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight9"]:SetNoCollision(true);
	ObjectManager:AddObject(sprites["river_knight9"]);

	-- This sprite represents the boss encountered at the end of the map
	-- TODO: build the sprite properly using the large scoprion sprite
	sprites["scorpion_boss"] = ConstructEnemySprite("goliath_scorpion", Map);
	sprites["scorpion_boss"]:SetContext(contexts["collapsed"]);
	sprites["scorpion_boss"]:SetPosition(274, 20);
	sprites["scorpion_boss"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["scorpion_boss"]:SetNoCollision(true);
	sprites["scorpion_boss"]:SetMovementSpeed(hoa_map.MapMode.SLOW_SPEED);
	sprites["scorpion_boss"]:ChangeStateInactive();
	sprites["scorpion_boss"]:SetFadeTime(1000);
	ObjectManager:AddObject(sprites["scorpion_boss"]);
end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG, "Creating enemies...");

	-- Sets common battle environment settings for enemy sprites
	local SetBattleEnvironment = function(enemy)
		enemy:SetBattleMusicFile("mus/Battle_Jazz.ogg");
		enemy:SetBattleBackgroundFile("img/backdrops/battle/desert_cave.png");
		enemy:SetBattleScriptFile("lua/scripts/battles/first_battle.lua");
	end

	local enemy = {};

	---------- Create enemy sprites and adds them to the zones that they spawn/roam in
	-- Group #01
	enemy = ConstructEnemySprite("slime", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(2);
	enemy:AddEnemy(2);
	zones["enemy01"]:AddEnemy(enemy, Map, 1);

	-- Group #02
	enemy = ConstructEnemySprite("snake", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(1);
	zones["enemy02"]:AddEnemy(enemy, Map, 1);
	
	-- Group #03
	enemy = ConstructEnemySprite("scorpion", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	enemy:AddEnemy(5);
	zones["enemy03"]:AddEnemy(enemy, Map, 1);

	-- Group #04
	enemy = ConstructEnemySprite("snake", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:AddEnemy(6);
	enemy:AddEnemy(6);
	zones["enemy04"]:AddEnemy(enemy, Map, 1);
	
	-- Group #05
	enemy = ConstructEnemySprite("slime", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(2);
	enemy:AddEnemy(6);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("snake", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(4);
	enemy:AddEnemy(6);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("scorpion", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);
	
	-- Group #06
	enemy = ConstructEnemySprite("scorpion", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	zones["enemy06"]:AddEnemy(enemy, Map, 1);

	-- Group #07
	enemy = ConstructEnemySprite("snake", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:AddEnemy(5);
	enemy:AddEnemy(2);
	enemy:AddEnemy(4);
	zones["enemy07"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("scorpion", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	zones["enemy07"]:AddEnemy(enemy, Map, 1);
end -- function CreateEnemies()



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	event_dialogues = {}; -- Holds IDs of the dialogues used during events

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	--[[ TODO: add scripting support to place down a chest by knight's feet. This dialogue should only be read once.
	dialogue = hoa_map.MapDialogue.Create(10);
		text = hoa_system.Translate("Here, take the contents of this chest. Use these items to heal yourself if you become injured.");
		dialogue:AddLine(text, sprites["entrance_knight"]:GetObjectID());
		dialogue:AddLineEventAtStart(1000, 500);
	sprites["entrance_knight"]:AddDialogueReference(10);
	--]]

	dialogue = hoa_map.MapDialogue.Create(11);
		text = hoa_system.Translate("Watch your step and keep moving. It's not far to the river bed.");
		dialogue:AddLine(text, sprites["entrance_knight"]:GetObjectID());
	sprites["entrance_knight"]:AddDialogueReference(11);

	dialogue = hoa_map.MapDialogue.Create(20);
		text = hoa_system.Translate("The river bed is just through this passage. Be careful, the walls are a little unstable.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1010); -- Calls function IfStartObservePassingEvent to begin event_chains["observe_passing"]
	sprites["passage_knight1"]:AddDialogueReference(20);

	-- After the passage collapse event, this dialogue will be added to the passage_knight1 sprite
	dialogue = hoa_map.MapDialogue.Create(21);
		text = hoa_system.Translate("I'll direct everyone remaining to take the longer route.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(30);
		text = hoa_system.Translate("Dammit, ow ow ow...");
		dialogue:AddLine(text, sprites["injury_knight1"]:GetObjectID());
	sprites["injury_knight1"]:AddDialogueReference(30);

	dialogue = hoa_map.MapDialogue.Create(31);
		text = hoa_system.Translate("He sprained his ankle on a loose rock, so we're treating his injury. Move on ahead, you're almost there.");
		dialogue:AddLine(text, sprites["injury_knight2"]:GetObjectID());
	sprites["injury_knight2"]:AddDialogueReference(31);

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------
	-- Event: Entering the cave
	event_dialogues["entrance1"] = 100;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["entrance1"]);
		text = hoa_system.Translate("Claudius, I want you to lead us down to the riverbed.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	event_dialogues["entrance2"] = 101;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["entrance2"]);
		text = hoa_system.Translate("Wait a damn minute Lukar! Why are you putting a rookie like him in charge?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	event_dialogues["entrance3"] = 102;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["entrance3"]);
		text = hoa_system.Translate("Relax, Mark. This is the best way for him to get experience.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	event_dialogues["entrance4"] = 103;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["entrance4"]);
		text = hoa_system.Translate("Claudius, I realize that this is your first real mission as a knight. If you're not up to this task, that's okay.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("No, I can do it. I won't lead us astray.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Good. The path we're taking should be pretty straight forward, so don't worry about getting lost.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Tcsh. Just try not to get us all killed, okay rookie?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: First battle encounter
	event_dialogues["first_enemy_encounter1"] = 110;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["first_enemy_encounter1"]);
		text = hoa_system.Translate("Wait, look up ahead. There's an enemy in our way.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	event_dialogues["first_enemy_encounter2"] = 111;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["first_enemy_encounter2"]);
		text = hoa_system.Translate("A battle occurs whenever you collide with an enemy. Sometimes you can avoid a fight by sneaking past or running by an enemy before it has a chance to engage you. When you enter a battle you can no longer run away and must defeat your opponent.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("That enemy doesn't appear to be much of a threat, so let it engage us. I want to make sure you remember how a knight does battle.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Let's see how useful you are in a real fight, rookie.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: After first battle victory
	event_dialogues["first_enemy_encounter3"] = 120;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["first_enemy_encounter3"]);
		text = hoa_system.Translate("Nicely done. After a battle ends, you'll have a short moment of invulnerability to get away from any other enemies that may be roaming nearby. If you are surrounded by multiple foes when a battle begins, be ready to make a break for it as soon as the battle ends if you don't want to keep fighting.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Or you can not get yourself surrounded in the first place like a dumbass.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Well, Mark is correct. Even though he could have phrased that better.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("You must also be careful as enemies will re-spawn after a short period of time, so don't sit around thinking that you're out of danger. Other times an enemy that is defeated will not appear again.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	event_dialogues["first_enemy_encounter4"] = 121;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["first_enemy_encounter4"]);
		text = hoa_system.Translate("Ah, one more thing. You can access the party menu by pressing the [MENU] key while on a map. In the party menu you can heal your characters, change out your equipment, and manage your inventory.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	-- Event: Encountering first NPCs in the cave
	event_dialogues["first_npc_encounter"] = 130;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["first_npc_encounter"]);
		text = hoa_system.Translate("Hold. There's a friendly ahead. Characters that have information to share will have a small icon appear above them that gradually appears as you get closer. Stand facing the character and hit the [CONFIRM] key to hear what they have to say.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Keep in mind that a character may have more than one piece of information to share, or may have something new to say after a particular event has occurred. The icon will look differently if the character has dialogue that you have not seen before.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("So in other words, I should keep initiating a conversation with these characters until the new dialogue icon no longer appears above their head.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Look out, boys. We got a regular genius over here. Maybe you should have become a scholar instead of a knight.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: Discovery of corpse in south east part of cave
	event_dialogues["corpse_discovery1"] = 140;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["corpse_discovery1"]);
		text = hoa_system.Translate("Wait, look over there.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	event_dialogues["corpse_discovery2"] = 141;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["corpse_discovery2"]);
		text = hoa_system.Translate("A corpse. That's always a reassuring find in a place like this.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Hey, I think I see something under its hand.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: Player tries to go long route before short route
	event_dialogues["prevent_long_route"] = 150;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["prevent_long_route"]);
		text = hoa_system.Translate("Hey! Over here!");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());
	
	-- Event: As passage is collapsing
	event_dialogues["passage_collapse1"] = 160;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["passage_collapse1"]);
		text = hoa_system.Translate("Look out!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		dialogue:AddLineTiming(1000);

	-- Event: After passage collapse occurs
	event_dialogues["passage_collapse2"] = 161;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["passage_collapse2"]);
		text = hoa_system.Translate("Woah! Are you guys alright?");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());
		text = hoa_system.Translate("We're all fine. But the passage has caved in.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("There's another way around, although it's a longer route. Follow me.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());

	-- Event: Stopping player from trying to proceed to lower levels of the cave
	event_dialogues["prevent_level_descent"] = 170;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["prevent_level_descent"]);
		text = hoa_system.Translate("Wait. This path looks like it leads deeper into the cavern. The area we're trying to reach isn't down there. Let's head another direction.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Good. Who knows what could be lurking in the darkness down there.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: While crossing the narrow bridge between the two pits after hearing an evil hiss
	event_dialogues["hiss_sound"] = 180;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["hiss_sound"]);
		text = hoa_system.Translate("Did you hear that? What the hell was that sound?");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("I don't know, but I've got a bad feeling about this mission.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Well the sooner we achieve our objective, the sooner we get out of here and go home. So move your ass instead of your mouth.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	-- Event: Encountering the pool of running water near the end of the cave
	event_dialogues["spring_arrival"] = 190;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["spring_arrival"]);
		text = hoa_system.Translate("Hey check it out. The water is still running here.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("That's a good sign. The river obstruction must be close.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	-- Event: Player reaches dry river bed
	event_dialogues["riverbed_arrival"] = 200;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["riverbed_arrival"]);
		text = hoa_system.Translate("Alright, looks like everyone made it.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("Listen up! There's a large boulder obstructing the underground river that flows through here. When we get the water flowing again, we get to head out of here.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("Mikal! Torren! Take your units and secure ropes around that overgrown rock. The rest of you stay alert and watch their backs. The residents of this cave aren't going to be pleased that we're rearranging their home.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());

	event_dialogues["npc_heals"] = 201;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["npc_heals"]);
		text = hoa_system.Translate("Here, this will heal your wounds and fatigue. We need everyone to be at their full strength before we begin.");
		dialogue:AddLine(text, sprites["river_knight1"]:GetObjectID());
		dialogue:AddLineEventAtEnd(114); -- 114 = event_chains["riverbed_arrival"] + 4
		text = hoa_system.Translate("HP and SP restored.");
		-- TODO: this line is informational text and shouldn't be "spoken" by any sprite, but we do not yet have support for dialogue not attached to sprites
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: enemy battle gauntlet prior to boss fight
	event_dialogues["enemy_gauntlet1"] = 210;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["enemy_gauntlet1"]);
		text = hoa_system.Translate("Ready your swords. Here they come!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	event_dialogues["enemy_gauntlet2"] = 211;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["enemy_gauntlet2"]);
		text = hoa_system.Translate("Don't let any through!");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	event_dialogues["enemy_gauntlet3"] = 212;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["enemy_gauntlet3"]);
		text = hoa_system.Translate("Damn, there's still more?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: Before boss battle
	event_dialogues["before_boss"] = 220;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["before_boss"]);
		text = hoa_system.Translate("I heard that noise earlier. It sounds like its closer now.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Keep your eyes peeled and your swords ready men.");
		dialogue:AddLine(text, sprites["river_knight1"]:GetObjectID());
		text = hoa_system.Translate("I don't know how you expect to see shit in here. I can barely see the end of my blade.");
		dialogue:AddLine(text, sprites["river_knight2"]:GetObjectID());
		text = hoa_system.Translate("Over there! Watch out!");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: After boss battle
	event_dialogues["after_boss"] = 230;
	dialogue = hoa_map.MapDialogue.Create(event_dialogues["after_boss"]);
		text = hoa_system.Translate("Captain, you've been wounded!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("*cough cough*\nI'll be alright. Men, great job taking down that goliath. You've done well.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("We've achieved our objective here. Tend to the wounded and then let's make our way back home.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());
end -- function CreateDialogues()



function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	event_chains = {}; -- Holds IDs of the starting event for each event chain
	local event = {};

	---------- Event Chain 01: Initial scene and 4-part dialogue when the player first enters the cave
	IfPrintDebug(DEBUG, "Building event chain #01...");
	event_chains["entrance"] = 10;

	-- Part #1: Lukar turns around and asks Cladius to lead
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 0, 1, 0, -16);
	events["opening_dialogue"] = event;
	event:SetRelativeDestination(true);
	event:AddEventLinkAtStart(event_chains["entrance"] + 1);
	event:AddEventLinkAtStart(event_chains["entrance"] + 2);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 3, 1000);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 4, 1500);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 1, 2, 0, -16);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 2, 3, 0, -16);
	event:SetRelativeDestination(true);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 3, 3, hoa_map.MapMode.SOUTH);
	event = hoa_map.DialogueEvent.Create(event_chains["entrance"] + 4, event_dialogues["entrance1"]);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 5, 250);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 6, 500);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 7, 500);
	-- Part #2: Mark protests Lukar's decision
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 5, 2, hoa_map.MapMode.WEST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 6, 1, hoa_map.MapMode.EAST);
	event = hoa_map.DialogueEvent.Create(event_chains["entrance"] + 7, event_dialogues["entrance2"]);
	event:AddEventLinkAtEnd(18, 200);
	-- Part #3: Lukar reassures Mark
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 8, 3, hoa_map.MapMode.EAST);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 9, 100);
	event = hoa_map.DialogueEvent.Create(event_chains["entrance"] + 9, event_dialogues["entrance3"]);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 10, 300);
	-- Part #4: Lukar asks Claudius again, who accepts. Mark and Lukar's sprites disappear into Claudius
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 10, 3, -5, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 11);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 11, 3, hoa_map.MapMode.SOUTH);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 12, 100);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["entrance"] + 12, 1, hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 13, 100);
	event = hoa_map.DialogueEvent.Create(event_chains["entrance"] + 13, event_dialogues["entrance4"]);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 14, 100);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 15, 100);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 14, 2, -8, 0);
	event:AddEventLinkAtEnd(event_chains["entrance"] + 16);
	event:SetRelativeDestination(true);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["entrance"] + 15, 3, 0, 4);
	event:SetRelativeDestination(true);
	event = hoa_map.CustomEvent.Create(event_chains["entrance"] + 16, "EndOpeningScene", "");
--	event:AddEventLinkAtEnd(event_chains["entrance"] + 17);
	-- Part #5: TODO: add a dialogue that explains the controls to the player
--	event = hoa_map.DialogueEvent.Create(event_chains["entrance"] + 17, );

	---------- Event Chain 02: First enemy encounter
	IfPrintDebug(DEBUG, "Building event chain #02...");
	event_chains["first_enemy"] = 30;

	event = hoa_map.DialogueEvent.Create(event_chains["first_enemy"] + 0, event_dialogues["first_enemy_encounter1"]);
	event:AddEventLinkAtStart(event_chains["first_enemy"] + 1);
	event = hoa_map.CustomEvent.Create(event_chains["first_enemy"] + 1, "SpawnFirstEnemy", "");
	event:AddEventLinkAtEnd(event_chains["first_enemy"] + 2, 500);
	event = hoa_map.DialogueEvent.Create(event_chains["first_enemy"] + 2, event_dialogues["first_enemy_encounter2"]);
	event:AddEventLinkAtEnd(event_chains["first_enemy"] + 3);
	event = hoa_map.CustomEvent.Create(event_chains["first_enemy"] + 3, "EngageFirstEnemy", "");
	event:AddEventLinkAtEnd(event_chains["first_enemy"] + 4);
	-- Follow-up dialogue begins immediately after the battle ends
	event = hoa_map.DialogueEvent.Create(event_chains["first_enemy"] + 4, event_dialogues["first_enemy_encounter3"]);
	event:AddEventLinkAtEnd(event_chains["first_enemy"] + 5, 2000);
	event = hoa_map.DialogueEvent.Create(event_chains["first_enemy"] + 5, event_dialogues["first_enemy_encounter4"]);

	---------- Event Chain 03: Discovery of corpse in cave
	IfPrintDebug(DEBUG, "Building event chain #03...");
	event_chains["find_corpse"] = 40;

	-- Dialog when seeing the corpse
	event = hoa_map.DialogueEvent.Create(event_chains["find_corpse"] + 0, event_dialogues["corpse_discovery1"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 1);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 2);
	-- Enter scene state
	event = hoa_map.CustomEvent.Create(event_chains["find_corpse"] + 1, "StopMovementAndEnterScene", "");
	-- Move camera to corpse
	event = hoa_map.CustomEvent.Create(event_chains["find_corpse"] + 2, "CameraPanToCorpse", "");
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 3, 3000);
	-- Walk Claudius over to corpse
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["find_corpse"] + 3, sprites["claudius"], 206, 149);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 4);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 5);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 6);
	-- Face Claudius east toward the corpse
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["find_corpse"] + 4, sprites["claudius"], hoa_map.MapMode.EAST);
	-- Move camera back to Cladius
	event = hoa_map.CustomEvent.Create(event_chains["find_corpse"] + 5, "SetCameraToPlayer", "");
	-- Start dialogue about corpse
	event = hoa_map.DialogueEvent.Create(event_chains["find_corpse"] + 6, event_dialogues["corpse_discovery2"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_chains["find_corpse"] + 7);
	-- Exit Scene State
	event = hoa_map.CustomEvent.Create(event_chains["find_corpse"] + 7, "PopMapState", "");
	event:AddEventLinkAtStart(event_chains["find_corpse"] + 8);
	-- Add treasure
	event = hoa_map.CustomEvent.Create(event_chains["find_corpse"] + 8, "RewardPotion", "");


	---------- Event Chain 04: Prevent player from going long route before cave collapse
	IfPrintDebug(DEBUG, "Building event chain #04...");
	event_chains["follow_short_route"] = 50;

	-- Enter scene state
	event = hoa_map.CustomEvent.Create(event_chains["follow_short_route"] + 0, "StopMovementAndEnterScene", "");
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 1);
	-- Move camera to knight sprite
	event = hoa_map.CustomEvent.Create(event_chains["follow_short_route"] + 1, "CameraToGuideSprite", "");
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 2, 500);
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 3, 1000);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["follow_short_route"] + 2, sprites["passage_knight1"], hoa_map.MapMode.SOUTH);
	-- Throw up dialogue calling out player's party
	event = hoa_map.DialogueEvent.Create(event_chains["follow_short_route"] + 3, event_dialogues["prevent_long_route"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 4);
	-- Move camera back to Cladius
	event = hoa_map.CustomEvent.Create(event_chains["follow_short_route"] + 4, "SetCameraToPlayer", "");
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 5, 500);
	-- Move player sprite to NPC that called out
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["follow_short_route"] + 5, sprites["claudius"]:GetObjectID(), 8, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_chains["follow_short_route"] + 6);
	-- Exit scene state
	event = hoa_map.CustomEvent.Create(event_chains["follow_short_route"] + 6, "PopMapState", "");
		
	---------- Event Chain 05: Knight moves safely through short route while player watches
	IfPrintDebug(DEBUG, "Building event chain #05...");
	event_chains["observe_passing"] = 60;

	-- Enter scene state
	event = hoa_map.CustomEvent.Create(event_chains["observe_passing"] + 0, "StopMovementAndEnterScene", "");
	event:AddEventLinkAtEnd(event_chains["observe_passing"] + 1);
	-- Move Claudius south of the guide knight (he may already be at this location, and that's fine)
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["observe_passing"] + 1, sprites["claudius"],
		sprites["passage_knight1"].x_position, sprites["passage_knight1"].y_position + 3);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_chains["observe_passing"] + 2);
	-- Move guide knight out of the way so player can access passage
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["observe_passing"] + 2, sprites["passage_knight1"], -4, 0);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_chains["observe_passing"] + 3);
	-- Move camera to knight sprite
	event = hoa_map.CustomEvent.Create(event_chains["observe_passing"] + 3, "CameraFollowPathSprite", "");
	event:AddEventLinkAtEnd(event_chains["observe_passing"] + 4, 300);
	-- Move knight sprite down passage
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["observe_passing"] + 4, sprites["passage_knight2"], 60, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtStart(event_chains["observe_passing"] + 5, 2500);
	event:AddEventLinkAtStart(event_chains["observe_passing"] + 6, 3000);
	event:AddEventLinkAtEnd(event_chains["observe_passing"] + 7);
	-- Move camera back
	event = hoa_map.CustomEvent.Create(event_chains["observe_passing"] + 5, "SetCameraToPlayer", "");
	-- Exit scene state
	event = hoa_map.CustomEvent.Create(event_chains["observe_passing"] + 6, "PopMapState", "");
	-- Hide the knight sprite after he finishes walking through the passage
	event = hoa_map.CustomEvent.Create(event_chains["observe_passing"] + 7, "VanishPathSprite", "");

	---------- Event Chain 06: Short route passage collapses
	IfPrintDebug(DEBUG, "Building event chain #06...");
	event_chains["passage_collapse"] = 70;

	-- Enter scene state
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 0, "StopMovementAndEnterScene", "");
	event:AddEventLinkAtStart(event_chains["passage_collapse"] + 1);
	-- Play collapse sound
	event = hoa_map.SoundEvent.Create(event_chains["passage_collapse"] + 1, "snd/cave-in.ogg");	
	event:AddEventLinkAtStart(event_chains["passage_collapse"] + 2, 250); 
	-- Warning dialogue
	event = hoa_map.DialogueEvent.Create(event_chains["passage_collapse"] + 2, event_dialogues["passage_collapse1"]);
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 3);
	-- Shake the screen
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 3, "PassageCollapseShake", "");
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 4);
	-- Fade screen to black
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 4, "FadeOutScreen", "IsScreenFading");
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 5);
	-- Change all objects to context "passage collapsed"
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 5, "SwitchContextCollapsed", "");
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 6);
	-- Fade screen back in
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 6, "FadeInScreen", "IsScreenFading");
	event:AddEventLinkAtStart(event_chains["passage_collapse"] + 7);
	-- Move guide knight into the screen view
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["passage_collapse"] + 7, sprites["passage_knight1"], 20, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 8);
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 9);
	-- Turn Claudius to face guide knight
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["passage_collapse"] + 8, sprites["claudius"], hoa_map.MapMode.WEST);
	-- Dialogue after passage has collapsed
	event = hoa_map.DialogueEvent.Create(event_chains["passage_collapse"] + 9, event_dialogues["passage_collapse2"]);
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 10);
	-- Change dialogue of sprite guide
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 10, "ReplaceGuideDialogue", "");
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 11);
	event:AddEventLinkAtEnd(event_chains["passage_collapse"] + 12, 1000);
	-- Move guide knight to start of long passage
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["passage_collapse"] + 11, sprites["passage_knight1"], 145, 72);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);	
	-- Exit scene state
	event = hoa_map.CustomEvent.Create(event_chains["passage_collapse"] + 12, "PopMapState", "");
		
	----------  Event Chain 07: Moving forward through wall passage
	IfPrintDebug(DEBUG, "Building event chain #07...");
	event_chains["pass_wall_forward"] = 90;
	
	-- Make player sprite invisible with no collision detection
	event = hoa_map.CustomEvent.Create(event_chains["pass_wall_forward"] + 0, "HideCameraSprite", "");
	event:AddEventLinkAtEnd(event_chains["pass_wall_forward"] + 1);
	-- Move camera inside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_forward"] + 1, sprites["claudius"], 85, 6);
	event:AddEventLinkAtEnd(event_chains["pass_wall_forward"] + 2);
	-- Move camera down and to the right near wall passage exit
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_forward"] + 2, sprites["claudius"], 104, 22);
	event:AddEventLinkAtEnd(event_chains["pass_wall_forward"] + 3);
	-- Move sprite back outside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_forward"] + 3, sprites["claudius"], 112, 21);
	event:AddEventLinkAtEnd(event_chains["pass_wall_forward"] + 4);
	-- Make player sprite visible and restore collision detection
	event = hoa_map.CustomEvent.Create(event_chains["pass_wall_forward"] + 4, "ShowCameraSprite", "");
		
	---------- Event Chain 08: Moving backward through wall passage
	IfPrintDebug(DEBUG, "Building event chain #08...");
	event_chains["pass_wall_backward"] = 95;

	-- Make player sprite invisible with no collision detection
	event = hoa_map.CustomEvent.Create(event_chains["pass_wall_backward"] + 0, "HideCameraSprite", "");
	event:AddEventLinkAtEnd(event_chains["pass_wall_backward"] + 1);
	-- Move camera inside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_backward"] + 1, sprites["claudius"], 112, 21);
	event:AddEventLinkAtEnd(event_chains["pass_wall_backward"] + 2);
	-- Move camera up and to the left near wall passage exit
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_backward"] + 2, sprites["claudius"], 85, 6);
	event:AddEventLinkAtEnd(event_chains["pass_wall_backward"] + 3);
	-- Move sprite back outside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["pass_wall_backward"] + 3, sprites["claudius"], 76, 6);
	event:AddEventLinkAtEnd(event_chains["pass_wall_backward"] + 4);
	-- Make player sprite visible and restore collision detection
	event = hoa_map.CustomEvent.Create(event_chains["pass_wall_backward"] + 4, "ShowCameraSprite", "");
		
	---------- Event Chain 09: Arriving at the spring just before riverbed
	IfPrintDebug(DEBUG, "Building event chain #09...");
	event_chains["spring_arrival"] = 100;
	
	-- Begin dialogue between characters
	event = hoa_map.DialogueEvent.Create(event_chains["spring_arrival"], event_dialogues["spring_arrival"]);
	
	-- The event chains that follow are all played out sequentially, hence why we define their event chain IDs here
	-- so that each chain can have access to the starting event ID of the proceeding chain.
	event_chains["riverbed_arrival"] = 110;
	event_chains["enemy_gauntlet"] = 150;
	event_chains["boss_encounter"] = 190;
	event_chains["final_scene"] = 230;

	---------- Event Chain 10: Arriving at riverbed
	IfPrintDebug(DEBUG, "Building event chain #10...");
	
	-- Enter the scene state, which we will remain at for the remaind of the map outside of dialogues
	event = hoa_map.CustomEvent.Create(event_chains["riverbed_arrival"] + 0, "StopMovementAndEnterScene", "");
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 1);
	-- Move player sprite in to the gathering of knights in the river bed
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 1, sprites["claudius"], 238, 12);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 2);
	-- Begin arrival dialogue
	event = hoa_map.DialogueEvent.Create(event_chains["riverbed_arrival"] + 2, event_dialogues["riverbed_arrival"]);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 3);
	-- Move senior knight to the right of Claudius and begin the healing dialogue
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 3, sprites["river_knight1"], 238, 12)
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 5, 0);
	event = hoa_map.CustomEvent.Create(event_chains["riverbed_arrival"] + 4, "RestoreParty", ""); -- This event is called within the npc_heals dialogue lines
	event = hoa_map.DialogueEvent.Create(event_chains["riverbed_arrival"] + 5, event_dialogues["npc_heals"]);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 6, 0);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 8, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 9, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 10, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 11, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 12, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 13, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 14, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 15, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 16, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 17, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 18, 200);
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 19, 200);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"], 5000);
	-- Set the camera to the virtual focus and move it to the center of the knight's furture position
	event = hoa_map.CustomEvent.Create(event_chains["riverbed_arrival"] + 6, "VirtualFocusToPlayer", "");
	event:AddEventLinkAtEnd(event_chains["riverbed_arrival"] + 7);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 7,  Map.virtual_focus, 260, 16);
	-- Move the character sprite and other knights to their positions
	-- Knights to the north are working on moving the boulder
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 8, sprites["river_knight2"], 260, 13);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 9, sprites["river_knight3"], 256, 13);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 10, sprites["river_knight4"], 258, 14);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 11, sprites["river_knight5"], 263, 13);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 12, sprites["captain"], 262, 15);
	event:SetFinalDirection(hoa_map.MapMode.NORTH); -- TODO: for some reason captain sprite won't change his facing direction here
	-- Knights to the south are defending (including Claudius)
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 13, sprites["river_knight7"], 264, 24);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 14, sprites["river_knight8"], 260, 23);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 15, sprites["claudius"], 256, 22);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 16, sprites["sergeant"], 257, 19);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	-- Knights to the west are defending
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 17, sprites["river_knight9"], 253, 15);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 18, sprites["river_knight1"], 251, 18);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["riverbed_arrival"] + 19, sprites["river_knight6"], 253, 19);
	event:SetFinalDirection(hoa_map.MapMode.WEST);

	---------- Event Chain 11: Enemy gauntlet
	IfPrintDebug(DEBUG, "Building event chain #11...");
	local battle_music = "mus/Battle_Jazz.ogg";
	local battle_background = "img/backdrops/battle/desert_cave.png";

	-- TODO: add a sound like the movement of rocks to indicate the unblocking work has begun
	-- TODO: add spawning and movement of enemies to the knights before battle
	-- First dialogue and battle
	event = hoa_map.DialogueEvent.Create(event_chains["enemy_gauntlet"] + 0, event_dialogues["enemy_gauntlet1"]);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"] + 1, 500);
	event = hoa_map.BattleEncounterEvent.Create(event_chains["enemy_gauntlet"] + 1);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(2);
	event:AddEnemy(3);
	event:AddEnemy(3);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"] + 2, 500);
	-- Second dialogue and battle
	event = hoa_map.DialogueEvent.Create(event_chains["enemy_gauntlet"] + 2, event_dialogues["enemy_gauntlet2"]);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"] + 3, 500);
	event = hoa_map.BattleEncounterEvent.Create(event_chains["enemy_gauntlet"] + 3);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(4);
	event:AddEnemy(4);
	event:AddEnemy(6);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"] + 4, 500);
	-- Third dialogue and battle
	event = hoa_map.DialogueEvent.Create(event_chains["enemy_gauntlet"] + 4, event_dialogues["enemy_gauntlet3"]);
	event:AddEventLinkAtEnd(event_chains["enemy_gauntlet"] + 5, 500);
	event = hoa_map.BattleEncounterEvent.Create(event_chains["enemy_gauntlet"] + 5);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(5);
	event:AddEnemy(5);
	event:AddEnemy(7);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"], 1000);

	---------- Event Chain 12: Boss encounter and battle
	IfPrintDebug(DEBUG, "Building event chain #12...");

	event = hoa_map.SoundEvent.Create(event_chains["boss_encounter"], "snd/evil_hiss.ogg");
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 1, 750);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 2, 1110);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 3, 800);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 4, 570);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 5, 1290);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 6, 1640);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 7, 560);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 8, 1330);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 9, 2470);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 10, 1500);
	-- Sprites look around in random directions trying to find the source of the sound
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 1, sprites["claudius"], hoa_map.MapMode.NORTH);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 2, sprites["river_knight5"], hoa_map.MapMode.SOUTH);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 3, sprites["captain"], hoa_map.MapMode.WEST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 4, sprites["river_knight7"], hoa_map.MapMode.NORTH);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 5, sprites["river_knight8"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 6, sprites["sergeant"], hoa_map.MapMode.NORTH);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 7, sprites["river_knight9"], hoa_map.MapMode.NORTH);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 8, sprites["river_knight1"], hoa_map.MapMode.WEST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 9, sprites["river_knight6"], hoa_map.MapMode.SOUTH);
	-- After the dialogue, have all sprites look toward the spawning boss enemy
	event = hoa_map.DialogueEvent.Create(event_chains["boss_encounter"] + 10, event_dialogues["before_boss"]);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 11, 50);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 12, 25);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 13, 75);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 14, 100);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 15, 50);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 16, 75);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 17, 25);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 18, 100);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 19, 50);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 20, 25);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 21, 75);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 22, 50);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 23);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 11, sprites["claudius"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 12, sprites["captain"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 13, sprites["sergeant"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 14, sprites["river_knight1"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 15, sprites["river_knight2"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 16, sprites["river_knight3"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 17, sprites["river_knight4"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 18, sprites["river_knight5"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 19, sprites["river_knight6"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 20, sprites["river_knight7"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 21, sprites["river_knight8"], hoa_map.MapMode.EAST);
	event = hoa_map.ChangeDirectionSpriteEvent.Create(event_chains["boss_encounter"] + 22, sprites["river_knight9"], hoa_map.MapMode.EAST);
	-- Spawn the boss sprite, then move it close to the knights position while shaking the screen as it walks
	event = hoa_map.CustomEvent.Create(event_chains["boss_encounter"] + 23, "SpawnBoss", "SpawnBossComplete");
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 24);
	event = hoa_map.PathMoveSpriteEvent.Create(event_chains["boss_encounter"] + 24, sprites["scorpion_boss"], 262, 20);
	event:AddEventLinkAtStart(event_chains["boss_encounter"] + 25);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 26);
	event:AddEventLinkAtEnd(event_chains["boss_encounter"] + 27, 1000);
	event = hoa_map.CustomEvent.Create(event_chains["boss_encounter"] + 25, "BossMovementShake", "");
	event = hoa_map.CustomEvent.Create(event_chains["boss_encounter"] + 26, "StopScreenShake", "");
	event = hoa_map.BattleEncounterEvent.Create(event_chains["boss_encounter"] + 27);
	event:SetMusic("mus/The_Creature_Awakens.ogg");
	event:SetBackground(battle_background);
	event:AddEnemy(91);
	event:AddEventLinkAtEnd(event_chains["final_scene"], 0);

	---------- Event Chain 13: Post boss encounter and final scene
	IfPrintDebug(DEBUG, "Building event chain #13...");

	-- Part 4: post boss battle dialogue and end map transition
	event = hoa_map.CustomEvent.Create(event_chains["final_scene"], "SwitchContextUnblocked", "IsScreenFading");
	event:AddEventLinkAtEnd(event_chains["final_scene"] + 1, 500);
	event = hoa_map.DialogueEvent.Create(event_chains["final_scene"] + 1, event_dialogues["after_boss"]);
	event:AddEventLinkAtEnd(event_chains["final_scene"] + 2, 500);
	-- Transition to the return scene map
	event = hoa_map.MapTransitionEvent.Create(event_chains["final_scene"] + 2, "lua/scripts/maps/a01_return_scene.lua");

	----------------------------------------------------------------------------
	---------- Miscellaneous Events
	----------------------------------------------------------------------------
	-- Places a treasure chest down by the entrance knight sprite
	event = hoa_map.CustomEvent.Create(1000, "EntrancePlaceChest", "");

	-- An event used by a dialogue to determine if event_chains["observe_passing"] should be started
	event = hoa_map.CustomEvent.Create(1010, "IfStartObservePassingEvent", "");

	-- TODO: see about having this sound event play occasionally during the map
	event_chains["hiss_sound"] = 1020;
	event = hoa_map.SoundEvent.Create(event_chains["hiss_sound"], "snd/evil_hiss.ogg");
end -- function CreateEvents()


-- Called at the end of the first event chain to hide all character sprites but Claudius
-- and give control over to the player.
functions["EndOpeningScene"] = function()
	sprites["mark"]:SetVisible(false);
	sprites["lukar"]:SetVisible(false);
	sprites["claudius"]:SetNoCollision(false);
	Map:PopState();
end

-- Creates the first enemy encountered on the map. The enemy spawns more quickly than normal,
-- is not contained within a zone, and is spawned a short distance to the north of the player.
functions["SpawnFirstEnemy"] = function()
	IfPrintDebug(DEBUG, "First Enemy Spawned");
	
	--[[ TODO
	local enemy = ConstructEnemySprite("slime", Map);
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:SetXLocation(Map.camera.x_position, 0);
	enemy:SetYLocation(Map.camera.y_position - 4, 0);
	enemy:SetFadeTime(1000);
	enemy:ChangeStateSpawn();
	--]]
end


functions["EngageFirstEnemy"] = function()
	IfPrintDebug(DEBUG, "First Enemy Engaged");

	-- TODO
end

-- TODO: A chest placed down by the knight NPC near the entrance
functions["EntrancePlaceChest"] = function()
	IfPrintDebug(DEBUG, "Treasure placed down");

	-- sprites["entrance_knight"] -- Turn to face chest
end;

-- Stop camera sprite and enter scene state
functions["StopMovementAndEnterScene"] = function()
	Map.camera:SetMoving(false);
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
end

-- Restore previous map state (typically from "scene" to "explore")
functions["PopMapState"] = function()
	Map:PopState();
end

-- Short screen shake during the passage collapse event chain
functions["PassageCollapseShake"] = function()
	VideoManager:ShakeScreen(2.0, 2000.0, hoa_video.GameVideo.VIDEO_FALLOFF_NONE);
end


-- Small degree of screen shaking while the boss sprite is moving
functions["BossMovementShake"] = function()
	-- Shake time is 0, meaning it will continue to shake until VideoManager:StopShaking() is called
	VideoManager:ShakeScreen(1.0, 0.0, hoa_video.GameVideo.VIDEO_FALLOFF_NONE);
end

-- Stop any active screen shaking
functions["StopScreenShake"] = function()
	VideoManager:StopShaking();
end

-- Change map to scene state
functions["PushSceneState"] = function()
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
end

-- Pop current map state
functions["PopState"] = function()
	Map:PopState();
end

-- Gives a potion to the player via the treasure menu
functions["RewardPotion"] = function()
	AudioManager:PlaySound("snd/obtain.wav");
	corpse_treasure = hoa_map.MapTreasure();
	corpse_treasure:AddObject(1, 1);
	TreasureManager:Initialize(corpse_treasure);
end

-- Wraps the start of the observ_passing event chain so that it is only ever executed one time
functions["IfStartObservePassingEvent"] = function()
	if (GlobalEvents:DoesEventExist("observed_passing") == false) then
		GlobalEvents:AddNewEvent("observed_passing", 1);
		EventManager:StartEvent(event_chains["observe_passing"]);
	end
end

-- Quickly Fades the screen to black
functions["FadeOutScreen"] = function()
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 1000);
end

-- Quickly fades screen from back into full view
functions["FadeInScreen"] = function()
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 1000);
end

-- Returns true when screen is no longer in the process of fading
functions["IsScreenFading"] = function()
	if (VideoManager:IsFading() == true) then
		return false;
	else
		return true;
	end
end

-- Switches the map context of all map objects to the collapsed context
functions["SwitchContextCollapsed"] = function()
	SwapContextForAllObjects(contexts["collapsed"]);
end

-- Switches the map context of all map objects to the unblocked context
-- And makes numerous changes to transition the map state to the final scene
functions["SwitchContextUnblocked"] = function()
	SwapContextForAllObjects(contexts["unblocked"]);

	-- The boss has been defeated at this point, so hide it from the map
	sprites["scorpion_boss"]:ChangeStateInactive();

	-- Move the character sprite and all NPCs so they are no longer standing in the now flowing riverbed
	sprites["captain"]:SetPosition(251, 13);
	sprites["captain"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["sergeant"]:SetPosition(253, 14);
	sprites["sergeant"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["claudius"]:SetPosition(248, 14);
	sprites["claudius"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight1"]:SetPosition(251, 16);
	sprites["river_knight1"]:SetDirection(hoa_map.MapMode.NORTH);

	sprites["river_knight2"]:SetPosition(240, 17);
	sprites["river_knight2"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight3"]:SetPosition(243, 16);
	sprites["river_knight3"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight4"]:SetPosition(241, 20);
	sprites["river_knight4"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight5"]:SetPosition(243, 19);
	sprites["river_knight5"]:SetDirection(hoa_map.MapMode.NORTH);

	sprites["river_knight6"]:SetPosition(250, 21);
	sprites["river_knight6"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight7"]:SetPosition(247, 22);
	sprites["river_knight7"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight8"]:SetPosition(249, 23);
	sprites["river_knight8"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight9"]:SetPosition(251, 25);
	sprites["river_knight9"]:SetDirection(hoa_map.MapMode.NORTH);

	-- Set the screen to black and begin fading it back in
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 0);
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 1000);

	-- Set the camera back to Claudius
	Map:SetCamera(sprites["claudius"], 0);
end

-- Makes the knight that moved along the short path disappear
functions["VanishPathSprite"] = function()
	sprites["passage_knight2"]:SetNoCollision(true);
	sprites["passage_knight2"]:SetVisible(false);
end


-- Change to scene state and make camera sprite invisible with no collision
functions["HideCameraSprite"] = function()
	Map.camera:SetMoving(false);
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	Map.camera:SetVisible(false);
	Map.camera:SetNoCollision(true);
end

-- Exit scene state and restore camera sprite visibility and collision status
functions["ShowCameraSprite"] = function()
	Map:PopState();
	Map.camera:SetVisible(true);
	Map.camera:SetNoCollision(false);
end

-- Replace dialogue of the knight that guides the player to the right path after the passage collapse
functions["ReplaceGuideDialogue"] = function()
	sprites["passage_knight1"]:RemoveDialogueReference(20);
	sprites["passage_knight1"]:AddDialogueReference(21);
end

-- Move camera to corpse
functions["CameraPanToCorpse"] = function()
	Map:MoveVirtualFocus(206, 147);
	Map:SetCamera(Map.virtual_focus, 2000);
end

-- Move camera back to player
functions["SetCameraToPlayer"] = function()
	Map:SetCamera(sprites["claudius"], 500);
end

-- Move camera to talking knight sprite
functions["CameraToGuideSprite"] = function()
	Map:SetCamera(sprites["passage_knight1"], 1000);
end

-- Move camera to talking knight sprite
functions["CameraFollowPathSprite"] = function()
	Map:SetCamera(sprites["passage_knight2"], 500);
end

-- Move the virtual focus to the player sprite and set the map camera to point to the focus
functions["VirtualFocusToPlayer"] = function()
	Map:MoveVirtualFocus(sprites["claudius"].x_position, sprites["claudius"].y_position);
	Map:SetCamera(Map.virtual_focus);
end

-- Helper function that swaps the context for all objects on the map to the context provided in the argument
SwapContextForAllObjects = function(new_context)
	local max_index = ObjectManager:GetNumberObjects() - 1;
	
	for i = 0, max_index do
		ObjectManager:GetObjectByIndex(i):SetContext(new_context);
	end
end

-- Restores the HP and MP of each member in the character party to maximum and plays a sound
functions["RestoreParty"] = function()
	GlobalManager:RestoreAllCharacterHitPoints();
	GlobalManager:RestoreAllCharacterSkillPoints();
	-- TODO: it seems that this sound does not play, but others do. Also see if there's a more appropriate sound than this
	AudioManager:PlaySound("snd/heal.wav");
end

-- Begins spawning the boss sprite at the end of the cave
functions["SpawnBoss"] = function()
	sprites["scorpion_boss"]:ChangeStateSpawn();
	-- Changing the state of an enemy sprite also changes the no_collision property, which we want to remain off
	sprites["scorpion_boss"]:SetNoCollision(true);
end

-- Returns true when the boss sprite has finished spawning
functions["SpawnBossComplete"] = function()
	if (sprites["scorpion_boss"]:IsStateActive() == true) then
		-- Ensure that the no collision property remains active in the sprite's new state
		sprites["scorpion_boss"]:SetNoCollision(true);
		return true;
	else
		return false;
	end
end

